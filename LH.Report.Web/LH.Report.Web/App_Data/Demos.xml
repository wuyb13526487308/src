<Demos xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Demos.xsd"
    Key="MVC" IsMvc="true" IsMvcRazor="true" Title="DevExpress Extensions for ASP.NET MVC" >

    <LearnMoreUrl>
        http://go.devexpress.com/DevExpress_AspDemos_Mvc_LearnMore.aspx        
    </LearnMoreUrl>

    <DownloadUrl>
        http://go.devexpress.com/DevExpress_AspDemos_Download.aspx        
    </DownloadUrl>

    <BuyUrl>
        http://go.devexpress.com/DevExpress_AspDemos_BuyNow.aspx
    </BuyUrl>

    <VideosUrl>
        http://go.devexpress.com/DevExpress_AspDemos_Mvc_Video.aspx
    </VideosUrl>

    <DocUrl>
        http://go.devexpress.com/DevExpress_AspDemos_Mvc_Doc.aspx
    </DocUrl>

    <DemoGroup Key="Home" Title="Introduction">
        <Intro Key="Index" Title="Overview" SeoTitle="MVC Extensions">
            <BannerTitle>
                High-Performance Lightweight MVC Extensions
            </BannerTitle>
            <BannerText>
                Native MVC design with lightweight semantic rendering powered by the jQuery.
            </BannerText>
            <BannerImageUrl>
                ~/Content/Screens.png
            </BannerImageUrl>

            <DescriptionTitle>
                DevExpress MVC Extensions Online Demos
            </DescriptionTitle>
            <Description>
                <![CDATA[
                <p>
                    The samples on this webpage demonstrate many of the features and capabilities available to you 
                    when using DevExpress <b>ASP.NET MVC Extensions</b>. Key features include:
                </p>
                ]]>
            </Description>
            <DescriptionFooter>
                <![CDATA[
                <p>
                    To view any of the demos within these web pages, use the menu on the left hand side of this page. To learn more about the DevExpress Extensions for ASP.NET MVC, please refer to the following documents:
                </p>
                <ul>
                    <li>
                        <a href="http://documentation.devexpress.com/#AspNet/CustomDocument8161">Introduction to DevExpress Extensions for ASP.NET MVC</a>
                    </li>
                    <li>
                        <a href="http://documentation.devexpress.com/#AspNet/CustomDocument8163">How to Start Using DevExpress Extensions in an MVC Web Application</a> 
                    </li>
                    <li>
                        <a href="http://documentation.devexpress.com/#AspNet/CustomDocument8164">System Requirements for DevExpress MVC Extensions</a>
                    </li>
                </ul>
                <p>
                    If you want to explore the capabilities of these libraries further, we offer a free evaluation version and 
                    all our products are backed by a 60 day no questions asked money back guarantee. 
                    For assistance, feel free to contact us at <a href="mailto:support@devexpress.com">support@devexpress.com</a>.
                </p>                
                ]]>
            </DescriptionFooter>

            <Feature Title="Native Design" ImageUrl="~/Content/FeatureIcons/Native.png">
                <Description>
                    DevExpress ASP.NET MVC Extensions utilize the jQuery JavaScript library shipping with ASP.NET MVC.
                    Our extensions produce native ASP.NET MVC rendering via an extension to the HtmlHelper class,
                    support the separation of concerns paradigm, and maintain ease of testing practices.
                </Description>
            </Feature>

            <Feature Title="Unparalleled Performance" ImageUrl="~/Content/FeatureIcons/Performance.png">
                <Description>
                    DevExpress ASP.NET MVC Extensions produce no ViewState, have no postbacks and page life cycles.
                    The lightweight semantic rendering and resource optimizations used in our ASP.NET MVC Extensions allow you to
                    deliver highly responsive web applications, without having to write unnecessary code.
                </Description>
            </Feature>

            <Feature Title="Comprehensive Set of Powerful Extensions" ImageUrl="~/Content/FeatureIcons/Power.png">
                <Description>
                    Our rich collection of ASP.NET MVC Extensions will help you deliver high-performance business solutions in the
                    shortest possible time. From data analysis and navigation, to rich text editing and end-user layout capabilities –
                    DevExpress delivers unrivaled tools for the MVC platform.
                </Description>
            </Feature>

            <Feature Title="Data Binding" ImageUrl="~/Content/FeatureIcons/DataBinding.png">
                <Description>
                    DevExpress MVC Extensions fully support standard business object binding (the model).
                    To display static data, our navigation extensions can also be bound directly to an XML or Sitemap file.
                </Description>
            </Feature>

            <Feature Title="Appearance Customization and Styling" ImageUrl="~/Content/FeatureIcons/Appearance.png">
                <Description>
                    In addition to built-in themes, you can use style properties and CSS for appearance customization.
                    Templates are available for most UI elements – allowing you to easily modify and enhance layouts.
                </Description>
            </Feature>

            <Feature Title="AJAX jQuery Support" ImageUrl="~/Content/FeatureIcons/Ajax.png">
                <Description>
                    DevExpress MVC Extensions exploit the AJAX jQuery Library to ensure top-notch performance when executing callbacks and using web document HTML elements.
                </Description>
            </Feature>

            <Feature Title="Rich Client-Side Functionality" ImageUrl="~/Content/FeatureIcons/ClientSide.png">
                <Description>
                    A comprehensive client-side API is available for our MVC extensions. This functionality, which is then coupled with the ability to handle a rich set of client events provides full control over client side behavior.
                </Description>
            </Feature>

            <Feature Title="Cross-Browser Compatibility" ImageUrl="~/Content/FeatureIcons/CrossBrowser.png">
                <Description>
                    DevExpress ASP.NET MVC Extensions are aggressively tested on multiple browsers to ensure the highest level of compatibility.
                    Microsoft Internet Explorer 6.0+, Mozilla FireFox 2.0+, Google Chrome 1.0+, Apple Safari 3.0+, Opera 9.0+ and Netscape Navigator 9.0+ are fully supported.
                </Description>
            </Feature>

        </Intro>
    </DemoGroup>
    <DemoGroup Key="Common" Title="Common Features" IsNew="true">
      <Demo Key="ModelValidation" Title="Model Validation" SeoTitle="Data Editors for ASP.NET MVC - Model Validation"
            HighlightedIndex="3" HighlightedImageUrl="~/Content/DemoIcons/Editors.png" HighlightedTitle="Data Editors">
        <Description>
          <![CDATA[
                    <p><b>What is "Model Validation"?</b>
                    See this MSDN article to learn how the model validation works: <a href="http://msdn.microsoft.com/en-us/library/ee256141(v=vs.100).aspx">How to: Validate Model Data Using DataAnnotations Attributes</a></p>

                    <p>This demo illustrates how user input can be easily validated using a model-based ASP.NET MVC validation approach. DevExpress MVC Extensions can be seamlessly integrated into the ASP.NET MVC validation infrastructure. </p>

                    <p>DevExpress MVC Editors have their own container for displaying validation error messages, which can be enabled via the <b>ShowModelErrors</b> property. This container allows you to manipulate validation messages more flexibly, then via the standard <b>Html.ValidationMessageFor</b> helper. You can control how errors should be displayed within editors by using settings exposed via the editor <b>ValidationSettings</b> property, such as the <b>ValidationSettings.ErrorDisplayMode</b>.</p>
                  ]]>
        </Description>
        <SourceFile>~/Models/Validation.cs</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccess.cshtml</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccessPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="UnobtrusiveValidation" Title="Unobtrusive Client Validation">
        <Description>
          <![CDATA[
            <p><b>What is "Unobtrusive Client Validation"?</b>
            See this blog post to learn how unobtrusive client validation works: <a href="http://bradwilson.typepad.com/blog/2010/10/mvc3-unobtrusive-validation.html">Unobtrusive Client Validation in ASP.NET MVC 3</a>.</p>

            <p>This demo illustrates how user input can be easily validated using an unobtrusive ASP.NET MVC validation approach. DevExpress MVC Extensions can be seamlessly integrated into the ASP.NET MVC validation infrastructure.</p>

            <p>DevExpress MVC Editors have their own container for displaying validation error messages, which can be enabled via the <b>ShowModelErrors</b> property. This container allows you to manipulate validation messages more flexibly, then via the standard <b>Html.ValidationMessageFor</b> helper. You can control how errors should be displayed within editors by using settings exposed via the editor <b>ValidationSettings</b> property, such as <b>ValidationSettings.ErrorDisplayMode</b>.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Validation.cs</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccess.cshtml</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccessPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="jQueryValidation" Title="jQuery Client Validation">
        <Description>
          <![CDATA[
            <p>This demo illustrates how user input can be easily validated using the jQuery Validation library. DevExpress MVC extensions provide you with full jQuery Client Validation support.</p>
            <p>In this demo, the jQuery Validation methods are used to specify validation rules for individual model fields on the client. You can find a full list of the validation methods on the jQuery Documentation page: <a href="http://docs.jquery.com/Plugins/Validation#List_of_built-in_Validation_methods">Plugins/Validation - jQuery Wiki - List of built-in Validation methods</a>.</p>
            <p>The <b>rules:{...}</b> block contains field names with validation atributes.</p>
            <p>The <b>messages:{...}</b> block contains field names with related error messages that should be displayed to the end-users when the validation fails.</p>
            <p>The DevExpress MVC <b>ValidationSummary</b> extension is used to summarize validation errors from multiple editors and then display them in a single block.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Validation.cs</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccess.cshtml</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccessPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Callbacks" Title="jQuery Callbacks">
        <Description>
          <![CDATA[
          <p>DevExpress MVC extensions fully support jQuery AJAX callbacks. This demo shows how to load partial views containing DevExpress MVC extensions within a jQuery ajax callback.</p>

            <p>The Menu extension contains three items. When the end-user selects an item from the menu, the OnSelectingMenuItem function is called. This function contains an ajax request, which causes the <b>&lt;div&gt;</b> container to be updated with the rendered DevExpress MVC extension from the partial view.</p>

            <p>Ajax requiest settings:</p>
            <ul>
            <li><b>data</b> - defines the data to be sent on the server. In this demo, the selected menu item name is sent to the server.</li>
            <li><b>beforeSend</b> - defines a pre-request callback function. In this demo, the pre-request callback function invokes loading panel.</li>
            <li><b>success</b> - defines a function to be called if the request succeeds. In this demo, the called function hides the loading panel and puts the rendered extension code into the required container.</li>
            </ul>
            <p>You can find more available settings here: <a href="http://api.jquery.com/jQuery.ajax/">jQuery.ajax() &#8211; jQuery API</a>.</p>
          ]]>
        </Description>
        <SourceFile>~/Views/Common/CallbacksCalendarPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Common/CallbacksDataMiningPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Common/CallbacksVisualizationPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="AjaxForm" Title="Ajax Form" SeoTitle="Ajax Form">
        <Description>
          <![CDATA[
            <p>DevExpress MVC extensions fully support jQuery AJAX callbacks. This demo shows how to load partial views containing DevExpress MVC extensions within a jQuery ajax callback.</p>
            <p>The Menu extension contains three items. When the end-user selects an item from the menu, the OnSelectingMenuItem function is called. This function contains an ajax request, which causes the <b>&lt;div&gt;</b> container to be updated with the rendered DevExpress MVC extension from the partial view.</p>
            <p>Ajax requiest settings:</p>
            <ul>
            <li><b>data</b> - defines the data to be sent on the server. In this demo, the selected menu item name is sent to the server.</li>
            <li><b>beforeSend</b> - defines a pre-request callback function. In this demo, the pre-request callback function invokes loading panel.</li>
            <li><b>success</b> - defines a function to be called if the request succeeds. In this demo, the called function hides the loading panel and puts the rendered extension code into the required container.</li>
            </ul>
            <p>You can find more available settings here: <a href="http://api.jquery.com/jQuery.ajax/">jQuery.ajax() &#8211; jQuery API</a>.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Validation.cs</SourceFile>
        <SourceFile>~/Views/Common/AjaxFormPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccess.cshtml</SourceFile>
      </Demo>
      <Demo Key="AjaxActionLink" Title="Ajax ActionLink" SeoTitle="Ajax ActionLink">
        <Description>
          <![CDATA[
            <p>DevExpress MVC Extensions support the <b>Ajax.ActionLink()</b> helper method.</p>
            <p>The <b>Ajax.ActionLink()</b> helper method returns an anchor element that contains the URL to the specified action method; when the action link is clicked, the action method is invoked asynchronously by using JavaScript.</p>
            <p>In this demo, the <b>Ajax.ActionLink()</b> is used to render a link that allows end-users to load information about the GridView item's category.</p>
            <p>You can learn more about the <b>Ajax.ActionLink()</b> helper from MSDN Reference: <a href="http://msdn.microsoft.com/en-us/library/system.web.mvc.ajax.ajaxextensions.actionlink(v=vs.108).aspx">AjaxExtensions.ActionLink Method</a>.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/Common/AjaxActionLinkPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Common/AjaxActionLinkCategoryPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="EditorTemplates" Title="Editor Templates">
        <Description>
          <![CDATA[
            <p>DevExpress MVC extensions support standard the ASP.NET MVC templating system. This demo illustrates how to use DevExpress MVC Data Editors for building custom editor templates.</p>
            <p>The <b>Html.EditorFor()</b> method is used to display data editors for model data fields using the required template. This method consults the <b>UIHint</b> attribute value or data type to determine which template to render for the given property.</p>
            <p>All the custom editor template files are located in the <b>EditorTemplates</b> subfolder in the <b>~\Views\Shared</b> project folder. Each template file has the same name as a corresponding data type or <b>UIHint</b> attribute value. The template view code in this demo contains the label that displays the property name and the data editor that allows you to edit the required field.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Validation.cs</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccess.cshtml</SourceFile>
        <SourceFile>~/Views/Common/ValidationSuccessPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Common/EditorTemplates/String.cshtml</SourceFile>
        <SourceFile>~/Views/Common/EditorTemplates/FuelType.cshtml</SourceFile>
        <SourceFile>~/Views/Common/EditorTemplates/Mileage.cshtml</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="GridView" Title="Grid View" SeoTitle="MVC Grid View" IsUpdated="true">
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
                <![CDATA[<p>
                This demo illustrates how the DevExpress MVC Grid View can be bound to a Model passed to a View from the Controller. The <b>Bind</b> method is used to bind the MVC Grid View to the Model. As a Model for this demo, we use a message list retrieved from our twitter page.
            </p><p>
                The <b>CustomColumnDisplayText</b> method's delegate is used to change the text within the text column cells. The <b>SetStatusBarTemplateContent</b> method is utilized to create a template for the grid's status bar and to display a refresh message within it.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Tweets.cs</SourceFile>
            <SourceFile>~/Views/GridView/DataBindingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="DataBindingToLargeDatabase" Title="Data Binding to Large Database" SeoTitle="Blazing Fast Data Processing"
            HighlightedIndex="1" HighlightedImageUrl="~/Content/DemoIcons/Grid.png" HighlightedTitle="Data Grid">
            <Description>
                <![CDATA[
                <p>This demo illustrates how the DevExpress MVC Grid View can be bound to a large databases using LINQ to SQL.</p>
                <p>With the MVC Grid View, you can easily bind to LINQ to SQL data sources via the extension's <b>BindToLINQ</b> method. Simply call the method, pass the DataContext and table name as method parameters, and specify the key field via the GridView's <b>KeyFieldName</b> property. Internally, the <b>BindToLINQ</b> method uses our <b>LinqServerModeDataSource</b> component, which was specifically designed to allow the Grid View MVC Extension to efficiently process large amounts of data. The <b>LinqServerModeDataSource</b> component automatically enables server mode to optimize the execution of all LINQ queries initiated by the Grid View. In this mode, the Grid View loads records on demand and performs data-aware operations (sorting, filtering, grouping, etc.) on the data server. This technique significantly improves the Grid View's speed and responsiveness.</p>
                <p>You can explore the performance of the DevExpress MVC Grid View by executing data shaping operations against it (sorting, filtering, and grouping). Note how quickly the Grid View calculates summaries against 300,000 records.</p>
                ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/DataBindingToLargeDatabasePartial.cshtml</SourceFile>
            <SourceFile>~/Views/GridView/PerformanceTestPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="SimpleCustomBinding" Title="Custom Binding (Simple)" IsNew="true">
            <Description>
                <![CDATA[
<p>
GridView supports custom data binding that allows you to perform all data operations, such as paging, sorting, filtering, grouping and summary calculation, completely by yourself. 
</p>

<p>
In this mode, you handle data operations in corresponding Action methods; the correspondence is defined by populating the grid's <b>CustomBindingRouteValuesCollection</b>.
</p>

<p>
In each specified Action, the processed operation related state information, such as a column state (i.e., which column is sorted and in which direction) or a pager state (which page is selected), is passed automatically. The grid's current state (view model) can be obtained via the static <b>GridViewExtension.GetViewModel</b> method and can be updated with the processed operation state. Then, the required data should be provided for the grid view  model via a call to its <b>ProcessCustomBinding</b> method.
</p>

<p>
The <b>ProcessCustomBinding</b> method has several overloads. You can select a particular one depending on which data operations you need to handle. 
</p>

<p>
Generally, this method provides the following parameters representing typed method delegates:
</p>

<p>
getDataRowCountMethod of the <b>GridViewCustomBindingGetDataRowCountHandler</b> type<br/>
Provide implementation for this method to return the total number of data rows.
</p>
<p>
getDataMethod of the <b>GridViewCustomBindingGetDataHandler</b> type<br/>
Provide implementation for this method to return the required data rows to the grid.
</p>
<p>
getSummaryValuesMethod of the <b>GridViewCustomBindingGetSummaryValuesHandler</b> type<br/>
Provide implementation for this method to calculate and return values of summaries required within the grid.
</p>
<p>
getGroupingInfoMethod of the <b>GridViewCustomBindingGetGroupingInfoHandler</b> type<br/>
Provide implementation for this method to return data rows for visible and expanded groups in the required order that depends on the applied grouping and sorting.
</p>
<p>
getUniqueHeaderFilterValuesMethod of the <b>GridViewCustomBindingGetUniqueHeaderFilterValuesHandler</b> type<br/>
Provide implementation for this method to return unique values to be displayed in the header filter popup list invoked for a column.
</p>

<p>
The resulting grid state (view model) is returned as a model to a view that contains GridView. To bind GridView to this view model, use the <b>BindToCustomData</b> method.
</p>

<p>
This demo shows a simple implementation of custom data binding - only sorting and paging operations are processed.
</p>
                ]]>
            </Description>
            <SourceFile>~/Models/GridViewCustomBindingModel.cs</SourceFile>
            <SourceFile>~/Views/GridView/SimpleCustomBindingPartial.cshtml</SourceFile>
            <SourceFile>~/Views/GridView/PerformanceTestPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="AdvancedCustomBinding" Title="Custom Binding (Advanced)" IsNew="true">
          <Description>
            <![CDATA[
<p>
GridView supports custom data binding that allows you to perform all data operations, such as paging, sorting, filtering, grouping and summary calculation, completely by yourself. 
</p>

<p>
In this mode, you handle data operations in corresponding Action methods; the correspondence is defined by populating the grid's <b>CustomBindingRouteValuesCollection</b>.
</p>

<p>
In each specified Action, the processed operation related state information, such as a column state (i.e., which column is sorted and in which direction) or a pager state (which page is selected), is passed automatically. The grid's current state (view model) can be obtained via the static <b>GridViewExtension.GetViewModel</b> method and can be updated with the processed operation state. Then, the required data should be provided for the grid view  model via a call to its <b>ProcessCustomBinding</b> method.
</p>

<p>
The <b>ProcessCustomBinding</b> method has several overloads. You can select a particular one depending on which data operations you need to handle. 
</p>

<p>
Generally, this method provides the following parameters representing typed method delegates:
</p>

<p>
getDataRowCountMethod of the <b>GridViewCustomBindingGetDataRowCountHandler</b> type<br/>
Provide implementation for this method to return the total number of data rows.
</p>
<p>
getDataMethod of the <b>GridViewCustomBindingGetDataHandler</b> type<br/>
Provide implementation for this method to return the required data rows to the grid.
</p>
<p>
getSummaryValuesMethod of the <b>GridViewCustomBindingGetSummaryValuesHandler</b> type<br/>
Provide implementation for this method to calculate and return values of summaries required within the grid.
</p>
<p>
getGroupingInfoMethod of the <b>GridViewCustomBindingGetGroupingInfoHandler</b> type<br/>
Provide implementation for this method to return data rows for visible and expanded groups in the required order that depends on the applied grouping and sorting.
</p>
<p>
getUniqueHeaderFilterValuesMethod of the <b>GridViewCustomBindingGetUniqueHeaderFilterValuesHandler</b> type<br/>
Provide implementation for this method to return unique values to be displayed in the header filter popup list invoked for a column.
</p>

<p>
The resulting grid state (view model) is returned as a model to a view that contains GridView. To bind GridView to this view model, use the <b>BindToCustomData</b> method.
</p>

<p>
This demo shows an advanced implementation of custom data binding - all data operations are processed (in particular: sorting, paging, grouping, summary calculations and filtering including column header filter invocation).
</p>
                  ]]>
          </Description>
          <SourceFile>~/Models/GridViewCustomBindingModel.cs</SourceFile>
          <SourceFile>~/Views/GridView/AdvancedCustomBindingPartial.cshtml</SourceFile>
          <SourceFile>~/Views/GridView/PerformanceTestPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Sorting" Title="Sorting" SeoTitle="Sorting Against Multiple Columns">
            <Description>
                <![CDATA[
                <p>
                The DevExpress MVC Grid View allows you to sort data against an unlimited number of columns. The column's current sort order is indicated by a sort glyph displayed at the column header's rightmost edge.
            </p><p>
                Click the column's header to sort data against a given data column or change the column's sort order. To sort data against multiple columns, click column headers while holding the SHIFT key.
            </p><p>
                Set the <b>SettingsBehavior.AllowSort</b> option to true to enable end-user sorting.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/SortingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Grouping" Title="Grouping" SeoTitle="Outlook Style Data Grouping">
            <Description>
                <![CDATA[
            <p>
                The DevExpress MVC Grid View provides numerous data shaping options – including the ability to group records against an unlimited number of columns.
            </p><p>
                Grouping is allowed if the following properties are set to true:
            </p><ul><li><b>SettingsBehavior.AllowGroup</b></li><li><b>SettingsBehavior.AllowSort</b></li></ul><p>
                End-users can group data by dragging column headers to the Group Panel. This panel's visibility is controlled by the <b>Settings.ShowGroupPanel</b> option.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/GroupingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Editing" Title="Editing" SeoTitle="Data Editing">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates data editing options available to you when using the DevExpress MVC Grid View.
            </p><p>
                The MVC Grid View can include a column with links that execute Delete, Insert and Edit operations. The <b>SetDataItemTemplateContent</b> method is used to assign a specific template to the column. Editing data is performed within a specially designed page. This page contains the appropriate DevExpress editors for each Grid View column. Note that this demo also illustrates how model validation can be used together with DevExpress MVC Editors. The data model is decorated with custom validation attributes and both server-side and client-side validation code is added - allowing error messages to be automatically displayed in the browser near editors when client-side validation fails.
            </p><p>
                The <b>ClientLayout</b> method delegate is used to maintain the Grid View's state as a user navigates between the grid and the data edit page.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/EditingPartial.cshtml</SourceFile>
            <SourceFile>~/Views/GridView/EditingForm.cshtml</SourceFile>
        </Demo>
        <Demo Key="InlineEditing" Title="Inline Editing">
          <Description>
            <![CDATA[
          <p>
          This demo illustrates the Grid View's built-in data editing functionality. 
          </p>
          <p>
          To enable data editing operations, the grid's <b>KeyFieldName</b> property must be specified. For each allowed data operation (such as inserting, updating or deleting), provide an associated controller action that will apply data changes to Model and return the grid's partial view. You can reference these controller actions by their names using the <b>SettingsEditing.AddNewRowRouteValues</b>, <b>SettingsEditing.UpdateRowRouteValues</b>, and <b>SettingsEditing.DeleteRowRouteValues</b> properties. Note that in actions that handle update and insert operations, you can obtain the edited object using our specific DevExpressEditorsBinder model binder. In the actions handling delete operations, you can get the key value of the deleted row.
          </p>
          <p>
          To allow end-users to manipulate grid data, add a command column to the grid's column collection and specify which commands (New, Edit, Delete, Update, Cancel) can be used by end-users. To switch a grid row to edit mode, end-users should be allowed to click the Edit command.
          </p>
          <p>
          The following list highlights built-in edit modes available for the Grid View, from the simplest to the most sophisticated (use the grid's <b>SettingsEditing.Mode</b> property to specify edit mode):
          </p>
          <ul>
          <li>
          <p><b>In-Cell Editing</b></p>
          <p>When a row is switched to edit mode, its cells display appropriate editors.</p>
          </li>
          <li>
          <p><b>Edit Form</b></p>
          <p>When a row is switched to edit mode, an edit form appears under or instead of the edited row.</p>
          <p>Edit Form displays label-editor pairs that correspond to data columns, and the Update/Cancel commands that allow end-users to save or discard the changes made. The <b>EditFormSettings</b> property of data columns contains different settings to arrange label-editor pairs. This provides you with a flexible data editor arrangement mechanism. The default layout of the Edit Form is generated automatically.</p>
          </li>
          <li>
          <p><b>Popup Edit Form</b></p>
          <p>When a row is switched to edit mode, Edit Form is displayed as a popup window, which can be dragged and used in modal mode, if required.</p>
          </li>
          </ul>
          <p>
          By default, if the data entered and submitted by an end-user is invalid due to the Model validation rules, error texts are automatically displayed next to corresponding data field editors within the Grid View. This behavior is controlled by the grid's <b>SettingsEditing.ShowModelErrorsForEditors</b> property. 
          In addition, if Model data is invalid or an error occurs during data changes, you can use the grid's <b>SetEditErrorText</b> method to display a common error text in a special row at the bottom of the grid's edit form.
          </p>            
            ]]>
          </Description>
          <SourceFile>~/Models/Northwind.cs</SourceFile>
          <SourceFile>~/Views/GridView/InlineEditingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="InlineEditingWithTemplate" Title="Inline Editing (Templates)">
            <Description>
                <![CDATA[
                <p>
                Grid View allows you to provide a custom edit mode layout by creating an appropriate template for particular edited row cells or an entire Edit Form.
                </p>

                <p>
                This demo describes how a template for the grid's Edit Form can be defined using the <b>SetEditFormTemplateContent</b> method. Within a template, custom label-editor pairs and Update/Cancel buttons are explicitly created using helpers from DevExpress Data Editors Extensions (such as the Label, TextBox, ComboBox, SpinEdit, Button, etc.).
                </p>

                <p>
                Editors used within a template are customized in the following simple manner: they are bound to corresponding model data fields (via the <b>Bind</b> method), are named according to these fields (via the <b>Name</b> property), and their ability to automatically visualize model errors when validation fails is enabled (via the <b>ShowModelErrors</b> property). 
                </p>

                <p>
                Editors bind to values of the model's currently edited data object. Note that this object is passed into a template either automatically (as a template container's <b>DataItem</b> property - when a grid row is just switched to edit mode) or manually (as a ViewData data object passed from a controller - when data modifications cannot be accomplished due to input validation fail and it is required to return the edited data object back to the view's Edit Form without losing user changes). To correctly transfer values from DevExpress editors back to corresponding data model fields, the DevExpressEditorsBinder model binder is used within controller actions.
                </p>

                <p>
                Buttons that represent the Update and Cancel links are customized so that their <b>Text</b> properties are defined ("Update" and "Cancel" texts) and the <b>Click</b> client events are handled to call the grid's respective client methods - <b>UpdateEdit</b> and <b>CancelEdit</b>.
                </p>            
                ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/InlineEditingWithTemplatePartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Filtering" Title="Filtering" SeoTitle="Excel Style Data Filtering">
            <Description>
              <![CDATA[
<p>
The DevExpress MVC Grid View allows end-users to filter data with ease and simplicity. When filtering is enabled, grid column headers display filter buttons. Pressing the button invokes a filter dropdown, which lists unique values within the column. To execute a filter, end-users need only to select a value within the dropdown.
</p>

<p>
By default, filtering is disabled. To enable the MVC Grid's filter buttons, set the <b>Settings.ShowHeaderFilterButton</b> property to true.
</p>

<p>
Two list modes are available for filter dropdowns - List and CheckedList. A particular filter mode can be specified for individual columns via a column's <b>Settings.HeaderFilterMode</b> property. If this property is set to CheckedList for a column, the column's header filter dropdown contains a check box list, allowing end-users to select multiple items to be included in the filter criteria.
</p>

<p>
In addition to default filtering, the MVC Grid allows you to create custom filter values, define the desired filter, and display these values within the column's filter dropdown (via the <b>HeaderFilterFillItems</b> method delegate). In this demo, custom filter values are displayed within the 'Total' and 'Quantity' column filter dropdowns.
</p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/FilteringPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="FilterRow" Title="Filter Row">
            <Description>
                <![CDATA[
            <p>
                In addition to filters executed via the column header, the DevExpress MVC Grid View allows you to enable filtering via its “Filter Row” UI element. When active, the Filter Row allows end-users to filter grid data by entering text within its cells or by selecting values from its dropdown lists.
            </p><p>
                To display the Filter Row within the Grid View, set the <b>Settings.ShowFilterRow</b> property to true.
            </p><p>
                In this demo, the <b>Settings.ShowFilterRowMenu</b> property is also enabled so that end-users can specify filter conditions via a menu. This menu can be invoked by clicking the Filter Row button displayed within Filter Row cells.
            </p><p>
                Once a filter has been applied, it can be cleared by pressing the Clear button within the Filter Row. Use the <b>ClearFilterButton.Visible</b> property to activate this feature.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/FilterRowPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="FilterBuilder" Title="Filter Builder" SeoTitle="Built-in Filter Builder">
          <Description>
            <![CDATA[
                <p>
        The DevExpress MVC Grid View implements the built-in Filter Builder. You can use it to allow end-users to visually build complex filter criteria with an unlimited number of filter conditions, combined by logical operators. 
        </p>

        <p>
        End-users can open the Filter Builder popup window by clicking the image or filter expression link within a specific Filter Bar that can be displayed at the grid bottom. By default, the Filter Bar isn't displayed. You can use the <b>Settings.ShowFilterBar</b> property to control its display mode (Hidden, Visible, Auto).
        </p>

        <p>
        The Filter Bar displays the following elements:
        </p>

        <ul>
            <li><b>Filter Check Box</b> - Enables or temporarily disables the current filter.</li>
            <li><b>Filter Image</b> - Click this image to invoke the Filter Builder.</li>
            <li><b>Filter Expression Link</b> - A string representation of the currently applied filter criteria. A click on this link invokes the Filter Builder.</li>
            <li><b>Clear Command</b> - Clears the current filter.</li>
        </ul>

        <p>
        When the Filter Builder popup window is invoked, end-users are allowed to create and customize filter criteria as follows.
        </p>

        <ul>
            <li>
            <b>Add/Remove Conditions</b><br/>
            To create and customize filter criteria, use the Add and Remove buttons.
            </li>

            <li>
            <b>Change a Column in a Filter Condition</b><br/>
            To change a condition's column, invoke the column list and choose the required column.
            </li>

            <li>
            <b>Change an Operator in a Filter Condition</b><br/>
            To change a condition's operator, invoke the operator list and choose the required operator.
            </li>

            <li>
            <b>Edit a Condition's Value</b><br/>
            To edit a condition's value, click the operand value and type text. To discard changes to the value and close the active edit box, press ESC.
            </li>
        </ul>
              ]]>
          </Description>
          <SourceFile>~/Models/Northwind.cs</SourceFile>
          <SourceFile>~/Views/GridView/FilterBuilderPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="FocusedRow" Title="Focused Row">
            <Description>
                <![CDATA[
            <p>
                This demo dynamically displays detailed information for the selected row outside the MVC Grid View. The <b>FocusedRowChanged</b> client event is handled via the <b>OnGridFocusedRowChanged()</b> JavaScript function. This function queries the server by using the Grid View's <b>GetRowValues</b> client method, to return the current employee's ID and Notes. The returned array is passed to the <b>OnGetRowValues()</b> JavaScript function, that assigns the obtained values to corresponding controls (DevExpress Image and Memo Editors).
            </p><p>
                To enable the capabilities of Focused Row, set the <b>SettingsBehavior.AllowFocusedRow</b> property to true. Appearance of the Focused Row can be specified using the <b>Styles.FocusedRow</b> property.
            </p><p>
                Client Side<br />
                End-users can move row focus by clicking the desired row. To respond to a change in row selection, handle the <b>FocusedRowChanged</b> client event. To identify the currently focused row, use the <b>GetFocusedRowIndex</b> client method.
            </p><p>
                Server Side<br />
                Focused Row can be specified by using the <b>FocusedRowIndex</b> property. Use this property to move row focus in code.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/FocusedRowPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="RowSelection" Title="Row Selection">
            <Description>
                <![CDATA[
            <p>
                This demo displays contact names selected in the Grid View within the 'Selected values' list box.
            </p><p>
                To allow row selection, add a command column to the Grid View and set its <b>ShowSelectCheckBox</b> property to true. The column will display check boxes within its cells. End-users can check or uncheck these check boxes to select or de-select corresponding data rows.
            </p><p>
                The <b>SelectionChanged</b> client-side event is handled to display selected contacts within the list box and the number of selected contacts below it. Contact names are obtained using the Grid View's <b>GetSelectedFieldValues</b> client method. The number of selected rows is returned by the <b>GetSelectedRowCount</b> client method.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/RowSelectionPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Paging" Title="Paging">
            <Description>
                <![CDATA[
            <p>
            The GridView automatically splits large content across multiple pages and provides a built-in pager that enables end-users to navigate through data.
            </p>
            <p>
            The pager can be customized using settings of the <b>SettingsPager</b> property. This demo demonstrates the following settings:
            </p>
            <ul>
              <li>The <b>Position</b> setting controls the pager's position within a grid. The available options are: at the element's top, bottom, or both.</li>
              <li>The <b>PageSizeItemSettings.Visible</b> setting controls page size item visibility. This element is used to specify a page size, i.e. the number of items placed on a page.</li>
              <li>The <b>FirstPageButton.Visible</b> and <b>LastPageButton.Visible</b> settings control the first and last button's visibility. The buttons allows end-users to navigate to the first or the last page, respectively.</li>
            </ul>
            ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/PagingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Preview" Title="Preview" SeoTitle="Outlook Style Row Preview">
            <Description>
                <![CDATA[
            <p>
                The DevExpress MVC Grid View gives you the ability to display detail information for a given row within its Preview Row region. These are non-editable rows that allow large memo fields or custom data to be displayed across all the columns within the Grid View.
            </p><p>
                Preview Rows are displayed if the <b>Settings.ShowPreview</b> option is set to true. By default, Preview Rows are empty. Set the <b>PreviewFieldName</b> property to the required field in the data source to bind the preview rows with data. Use the <b>Styles.PreviewRow</b> property to access style settings used to paint preview rows.
            </p><p>
                To provide a template for rendering preview rows, use the <b>SetPreviewTemplateContent</b> method.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/PreviewPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Scrolling" Title="Scrolling">
            <Description>
                <![CDATA[
<p>
The MVC Grid View offers both vertical and horizontal scrolling. By default, the grid's height is determined by the number of rows displayed within a page and is controlled by the <b>SettingsPager.PageSize</b> property. To reduce the grid's height, you can display a vertical scrollbar by using the <b>Settings.VerticalScrollBarMode</b> property, and specify the height of the scrollable area (in pixels) via the <b>Settings.VerticalScrollableHeight</b> property. 
</p>
<p>
The grid's width is dependent upon the number of visible columns by default. If there are too many columns within the grid, you can enable horizontal scrolling via the <b>Settings. HorizontalScrollBarMode</b> property and define the desired scrollable area width by using the grid's <b>Width</b> property.
</p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/ScrollingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Summary" Title="Data Summaries Via Aggregate Functions" SeoTitle="Automatic Summary Calculation">
            <Description>
                <![CDATA[
            <p>
                Total summaries are aggregate function values calculated across all rows within the DevExpress MVC Grid View and displayed within its footer. The footer is visible if the <b>Settings.ShowFooter</b> property is set to true.
            </p><p>
                The Grid View stores total summary items within the <b>TotalSummary</b> collection. Individual items are represented by <b>ASPxSummaryItem</b> objects.  
            </p><p>
                A group summary represents the value of an aggregate function calculated across all data rows within a group. Group summaries are displayed within group rows. The Grid View stores its group summaries within the <b>GroupSummary</b> collection. Individual items are represented by <b>ASPxSummaryItem</b> objects.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/SummaryPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="MasterDetail" Title="Master-Detail">
          <Description>
            <![CDATA[
                <p>
                    The MVC Grid View supports master-detail data presentation of any complexity.
                </p>

                <p>
                    This demo shows how to create a simple master-detail relationship between two tables. All you have to do is to:
                </p>

                <ul>
                    <li>
                        Use two Grid View extensions.
                    </li>
                    <li>
                        Bind the first grid (master grid) to the master data source and enable the grid's <b>SettingsDetail.ShowDetailRow</b> option.
                    </li>
                    <li>
                        Place the second grid (detail grid) into the master grid's detail row template created via the <b>SetDetailRowTemplateContent</b> method.
                    </li>
                    <li>
                        Assign a unique (dynamically generated) name to the <b>Name</b> property of the detail grid and set its <b>SettingsDetail.MasterGridName</b> property to the master grid's name.
                    </li>
                    <li>
                        Bind the detail grid to the detail data source whose data is retrieved in a controller action based upon the corresponding master row ID passed via a ViewData parameter.
                    </li>
                </ul>
                <p>
                    By default, end-users can expand several master rows simultaneously. 
                    This behavior is controlled by the <b>SettingsDetail.AllowOnlyOneMasterRowExpanded</b> option. 
                </p>            
              ]]>
          </Description>
          <SourceFile>~/Models/Northwind.cs</SourceFile>
          <SourceFile>~/Views/GridView/MasterDetailDetailPartial.cshtml</SourceFile>
          <SourceFile>~/Views/GridView/MasterDetailMasterPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Bands" Title="Multi-Row Headers (Bands)">
            <Description>
                <![CDATA[
                  <p>
                  The GridView's multi-row headers feature allows you to organize grid columns in logical groups (bands). This demo illustrates basic band functionality.
                  </p>
                  <p>
                  A band is visually represented by a header displayed above headers of the columns it combines. Each band is realized as a specific column type - <b>MVCxGridViewBandColumn</b>. A band column is a different kind of column - it is designed not to display data values directly, but to contain other (child) columns within its <b>Columns</b> collection. Therefore, it is possible to have a hierarchy of nested bands. Moreover, you can place a data column and a band column at the same hierarchy level. To add a data column use a column collection's <b>Add</b> method to add a band column - the <b>AddBand</b> method.
                  </p>
                  <p>
                  Bands are not only used for display purposes. They can be dragged by end-users to re-order columns. This is extremely useful if you need to provide a quick way to re-arrange columns while preserving their logical grouping. Note that columns (and bands) are only allowed to move within their parent bands - you cannot move a child column from one parent band to another. This prevents end-users from breaking column grouping logic.
                  </p>
                  <p>
                  Resizing and column freezing features also work fine with bands. The only note is that column freezing (controlled by the <b>FixedStyle</b> property) can be applied only to columns and bands located at the root hierarchy level (i.e. within the grid's <b>Columns</b> collection).
                  </p>
            ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/BandsPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="CustomizationWindow" Title="Customization Window">
          <Description>
            <![CDATA[
                <p>
                    The <b>customization window</b> displays hidden column headers.
                </p>
                <ul>
                    <li>
                        To hide a grid column, drag its header to the customization window.
                    </li>
                    <li>
                        To make a column visible, drag its header from the customization window back to the Grid View's header panel.
                    </li>
                </ul>
                <p>
                    Use the <b>SettingsCustomizationWindow</b> property to specify the customization window's availability and position.
                </p>
                <p>
                    The following self-explanatory client-side methods allow you to manage the customization window:
                </p>
                <ul>
                    <li>
                        ShowCustomizationWindow()
                    </li>
                    <li>
                        HideCustomizationWindow()
                    </li>
                    <li>
                        IsCustomizationWindowVisible()
                    </li>
                </ul>            
            ]]>
          </Description>
          <SourceFile>~/Models/Northwind.cs</SourceFile>
          <SourceFile>~/Views/GridView/CustomizationWindowPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
            <p>
                This demo describes ways to use Templates within the DevExpress Grid View – in particular, this sample uses Templates for the pager bar and individual data rows.
            </p><p>
                Templates are defined by using the <b>SetPagerBarTemplateContent</b> and <b>SetDataRowTemplateContent</b> methods, respectively. These methods contain a parameter that represents specific template container objects. Template children are represented by combinations of HTML elements and DevExpress Editors.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/TemplatesPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Export" Title="Exporting Data">
            <Description>
                <![CDATA[
            <p>
                The MVC Grid View allows you to export its data with ease. Using specific static methods provided at the GridViewExtension class level, the GridView's data can be exported to a file or stream in the following formats:
            </p><ul><li>
                    PDF (<b>WritePdf</b>, <b>ExportToPdf</b>)
                </li><li>
                    XLS (<b>WriteXls</b>, <b>ExportToXls</b>)
                </li><li>
                    XLSX (<b>WriteXlsx</b>, <b>ExportToXlsx</b>)
                </li><li>
                    RTF (<b>WriteRtf</b>, <b>ExportToRtf</b>)
                </li></ul><p>
                This demo illustrates how data within the Grid View can be exported to different formats - based on the Grid View's current settings (defined in a single location - within the Controller). These settings are passed to a View containing the grid’s markup - 'View(partial)' and they are also used by export methods.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/GridView/ExportPartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="PivotGrid" Title="Pivot Grid" SeoTitle="MVC Pivot Grid">
      <Demo Key="SampleReports" Title="Sample Reports">
        <Description>
          <![CDATA[
            <p>
            This demo includes a set of reports for analyzing business data. Use Radio buttons to switch between reports.
            </p><ul><li>
              <b>Customers</b> - in this report, MVC Pivot Grid summarizes orders made by customers during a specific time period. The volume of orders is given for each product bought by a customer by quarters.
              </li><li>
              <b>Products(Filtering)</b> - in this report, MVC Pivot Grid displays products bought by customers within a year. Use the Year and Quarter combo boxes to specify which period should be displayed.
              </li><li>
              <b>Top 2 Products</b> - in this report, MVC Pivot Grid lists the most two popular products for each customer (those that attract the biggest interest). Clicking the 'Product Name' field header reverses the current sort order and the control displays the least popular products for each customer.
              </li><li>
              <b>Top 10 Customers</b> - MVC Pivot Grid lists top 10 customers, who purchased the biggest number of items. Clicking the 'Customer' field header reverses the sort order and displays those customers who purchased the smallest number of items.
            </li></ul>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/SampleReportsPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="SortBySummary" Title="Sort By Summary">
        <Description>
          <![CDATA[
            <p>
            This demo illustrates the Sorting By Summary feature that allows you to sort column or row field values by summary values calculated against a specific data field. In this example, the values of the 'Sales Person' field are actually sorted by summary values calculated against another data field. You can select this data field via the combo box at the top of the pivot grid. Clicking the 'Sales Person' field will reverse the current sort order.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/SortBySummaryPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Groups" Title="Field Groups">
        <Description>
          <![CDATA[
            <p>
            This demo shows the capability to group fields so that they are always kept together. For instance, if you drag a field from a group to another position, the entire group is moved.
            </p><p>
            End-users cannot break created groups. They can only expand and collapse groups at any level to show or hide data related to particular fields.
            </p><p>
            In this demo, fields located within the Row, Column and Data areas are joined into groups. You can drag them, expand and collapse individual fields.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/GroupsPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="FieldsCustomization" Title="Fields Customization" SeoTitle="Field Chooser Window">
        <Description>
          <![CDATA[
            <p>
            This example shows the Fields Customization Window. It allows you to temporarily hide specific fields and then restore them again when needed. You can show and hide the Fields Customization Window both on the server (using C# or VB code) and on the client (using JavaScript).
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/FieldsCustomizationPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="OLAP" Title="OLAP">
        <Description>
          <![CDATA[
            <p>
            It is likely that the most important MVC Pivot Grid functionality is OLAP support. MVC Pivot Grid supports both Microsoft Analysis Services 2000, 2005, 2008 and 2008 R2. It can use an ordinary server, http server or cube file as a datasource. The OLAP connection reduces the computing load on the web server by passing it to an OLAP server.
            </p><p>
            No model is required to establish an OLAP connection. All you need is to provide a connection string using the BindToOLAP method.
            </p><p>
            To connect to OLAP cubes, you should have Microsoft SQL Server 2005 Analysis Services 9.0 OLE DB Provider installed on your system. You can get the latest version of this provider here: <a href="http://www.microsoft.com/downloads/details.aspx?FamilyID=50b97994-8453-4998-8226-fa42ec403d17">http://www.microsoft.com/downloads/details.aspx?FamilyID=50b97994-8453-4998-8226-fa42ec403d17</a>.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Views/PivotGrid/OLAPPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="DrillDown" Title="Drill Down">
        <Description>
          <![CDATA[
          <p>
          MVC Pivot Grid includes the drill-down capability that enables you to retrieve a list of records that were used to calculate a particular summary.
          </p><p>
          In this demo, click a summary cell to view the records from the control's underlying datasource associated with this cell. The obtained data is displayed by the GridView extension within a popup window.
          </p>
          ]]>
        </Description>
        <SourceFile>~/Views/PivotGrid/DrillDownPivotGridPartial.cshtml</SourceFile>
        <SourceFile>~/Views/PivotGrid/DrillDownGridViewPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="ChartsIntegration" Title="Charts Integration">
        <Description>
          <![CDATA[
            <p>
            The MVC Pivot Grid allows data it displays to be visualized using the Chart extension. The pivot grid provides currently visible data and acts as a datasource for the chart.
            </p><p>
            If you display data horizontally, the Chart extension uses row values as series and column values as arguments, or vice versa if you wish to visualize data vertically. In this demo, you can control this via the 'Generate Series from Columns' check box. 
            </p><p>
            To specify whether Grand Totals are included in the chart, use the 'Show Column Grand Totals' and 'Show Row Grand Totals' check boxes.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/ChartsIntegrationPivotPartial.cshtml</SourceFile>
        <SourceFile>~/Views/PivotGrid/ChartsIntegrationChartPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="CompactLayout" Title="Compact Layout">
        <Description>
          <![CDATA[
            <p>
            By default, MVC Pivot Grid shows all rows in a hierarchical way, which is common for pivot tables (<b>Full Layout</b>). However, when there are a lot of fields in the Row Area, this kind of presentation may produce a cumbersome layout. To avoid this, the PivotGrid extension allows you to arrange row headers in a tree-like manner (<b>Compact Layout</b>), as shown in this demo. 
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/CompactLayoutPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
            <p>
            This demo shows a share of sales per product and per category. This report contains absolute and percent values, and their graphical representation.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/TemplatesPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Export" Title="Export" SeoTitle="Data Export to PDF, XLS, HTML">
        <Description>
          <![CDATA[
            <p>
            MVC Pivot Grid allows you to export its content to the PDF, Excel, MHT, Plain Text and RTF formats. This demo shows how to export MVC Pivot Grid to a stream, providing a user an option to open the report or save it to a disk.
            </p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
        <SourceFile>~/Views/PivotGrid/ExportPartial.cshtml</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="Report" Title="Report" SeoTitle="MVC Report">
        <Demo Key="MasterDetailReport" Title="Master-Detail Report">
            <Description>
                <![CDATA[
                <p>This demo illustrates the simplest way to create a master-detail report in a single report class.</p><p>To do this, you can use the <b>DetailReport</b> bands instead of employing the <b>XRSubreport</b> controls.</p><p>The resulting report represents data from a <b>Northwind</b> database. It consists of three levels of information on products and their suppliers, with the product orders grouped by their prices.</p> 
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="TableReport" Title="Table Report">
            <Description>
                <![CDATA[
                <p>This demo illustrates a way of creating a simple tabular report with <b>XtraReports</b>, using the <b>XRTable</b> control.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/TableReportParametersPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="ReportMerging" Title="Report Merging">
            <Description>
                <![CDATA[
                <p>This demo illustrates how different reports can be combined into one report. This may be useful, for instance, to print multiple documents as a single printer job, or to export many reports into a single PDF file.</p><p>Note that page orientation in the resulting document may be different for different pages, as well as the page size and other settings (e.g. watermarks, etc.) All this can be correctly previewed and exported with XtraReports.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="SideBySideReport" Title="Side-by-side Reports">
            <Description>
                <![CDATA[
                <p><b>XtraReports</b> allows you to print multiple subreports <b>side-by-side</b> within one report. <b>Subreports</b> can be completely independent from each other, and can even be bound to their own datasource.</p><p>In this demo, a report is constructed by two identical subreports that are designed to show employee information. You can control which employee is to be shown on each report side, and this employee's name is passed to a subreport as a <b>parameter</b> to filter its data.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SideBySideReportParametersPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="IListDataSourceReport" Title="IList DataSource">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="VerticalAnchoringReport" Title="Vertical Anchoring">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="ChartReport" Title="Chart">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="XRPivotGridReport" Title="Pivot Grid">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="PivotGridAndChartReport" Title="Pivot Grid and Chart">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="FormattingRulesReport" Title="Conditional Formatting">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/FormattingRulesReportParametersPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="FallCatalogReport" Title="Fall Catalog">
            <Description>
                <![CDATA[
                <p>This demo illustrates how to bind a report to <b>IList</b> data created and populated at runtime.</p><p><b>XtraReports</b> works with all the data objects supported by <b>Visual Studio .NET</b> - OleDb, SQL, etc. And also it's possible to bind a report to <b>XML</b> data or to any data object implementing the <b>IList</b> interface.</p><p>This example creates a simple table report containing information on different kinds of fish. This information is stored in a <b>TXT</b> file and loaded at runtime when a report is created. The application reads this file line by line and creates a collection used as a datasource for creating data bindings.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Report/SampleViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/FallCatalogReportParametersPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
        <Demo Key="ThumbnailsReport" Title="Thumbnails">
            <Description><![CDATA[                <p>This demo illustrates how to create an alternative <b>Bookmarks List</b> for a web report.</p><p>In this example, every detail record is associated with an employee photo, and all photos are visible on the right panel.</p><p>You're able to click on any photo in the list, and a report viewer will automatically navigate to the appropriate employee's detail information.</p>]]></Description>
            <SourceFile>~/Views/Report/ThumbnailsViewer.cshtml</SourceFile>
            <SourceFile>~/Views/Report/SampleViewerPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Reports.cs</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Chart" Title="Chart" SeoTitle="MVC Chart">
      <Demo Key="BarViews" Title="Bar/Column Views">
        <Description>
          <![CDATA[
          <p>Bar/column series views are intended to display data points as vertical bars (or columns) that are grouped by category. In this case, category labels are displayed on the X-axis, while values are represented by the length of the bars as measured by the Y-axis.</p>
          <p>DevExpress MVC Chart supports a wide range of bar chart types (including side-by-side, stacked, full-stacked, etc.), both in 2D and 3D. You can see all of them in this demo by choosing the required view using the <b>View Type</b> combo-box.</p>
          <p>Other options include:</p>
          <ul>
            <li><b>Show Labels</b>. Indicates whether series labels should be visible on a chart.</li>
            <li><b>Rotated Diagram</b>. When unchecked, data points are represented as columns. Setting this option to true will rotate a diagram, so that data points are represented as horizontal bars.</li>
          </ul>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/BarViewsPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/BarViewsSideBySideStackedPartial.cshtml</SourceFile>
        <SourceFile>~/Models/GreatLakesStateProduct.cs</SourceFile>
        <SourceFile>~/Models/PopulationAgeStructure.cs</SourceFile>
      </Demo>
      <Demo Key="PointLineViews" Title="Point/Line Views">
        <Description>
          <![CDATA[
          <p>Point and line series views are used to show trends for several series on the same diagram, either as simple markers, or as markers connected by lines. These views include point, line, spline and other chart types, both in 2D and 3D. To see the entire list of available point/line views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
          <p>Also you can show or hide series labels by toggling the <b>Show Labels</b> checkbox in this demo's options.</p>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/PointLineViewsPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/PointLineViewsBubblePartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/PointLineViewsFullStackedLinePartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/PointLineViewsScatterLinePartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/PointLineViewsStackedLinePartial.cshtml</SourceFile>
        <SourceFile>~/Models/Movies.cs</SourceFile>
        <SourceFile>~/Models/MathematicsFunctions.cs</SourceFile>
        <SourceFile>~/Models/Architectures.cs</SourceFile>
        <SourceFile>~/Models/GreatLakesStateProduct.cs</SourceFile>
        <SourceFile>~/Models/CorporationsMarketValue.cs</SourceFile>
      </Demo>
      <Demo Key="AreaViews" Title="Area Views">
        <Description>
          <![CDATA[
          <p>Area series views are intended to show filled areas on a diagram. In these series, values are represented by heights of peaks and hollows in each data point. Values can be used either separately (simple areas) or in an aggregated manner (stacked and full-stacked areas). To see the entire list of available area views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
          <p>Also you can show or hide series labels by toggling the <b>Show Labels</b> checkbox in this demo's options.</p>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/AreaViewsPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/AreaViewsStackedPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/AreaViewsFullStackedPartial.cshtml</SourceFile>
        <SourceFile>~/Models/Architectures.cs</SourceFile>
        <SourceFile>~/Models/CorporationsMarketValue.cs</SourceFile>
      </Demo>
      <Demo Key="PieDoughnutViews" Title="Pie/Doughnut Views">
        <Description>
          <![CDATA[
          <p>Pie and doughnut series views are intended to compare the percentage values of different point arguments in the same series. These charts may be useful to determine the most significant point value in the series, as well as the least significant. To see the entire list of available pie/doughnut views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
          <p>In this demo's options you can choose whether or not it is necessary to show series labels (<b>Show Labels</b>), whether they display absolute values or percents (<b>Values As Percent</b>) and adjust their position (<b>Label Position</b>).</p>
          <p>Also, you can select what pie slices should be expanded. For this, use the <b>Exploded Points</b> option.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Countries.cs</SourceFile>
      </Demo>
      <Demo Key="FunnelViews" Title="Funnel Views">
        <Description>
          <![CDATA[
          <p>Funnel series views are intended to compare the values of different point arguments in the same series. These charts may be useful to determine the most significant point value in the series, as well as the least significant. To see the entire list of available funnel views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
          <p>Also, in this demo's options you can chose whether or not it is necessary to show series labels (<b>Show Labels</b>), whether they display absolute values or percents (<b>Values As Percent</b>) and adjust their position (<b>Label Position</b>).</p>
          ]]>
        </Description>
        <SourceFile>~/Models/WebSiteVisitors.cs</SourceFile>
      </Demo>
      <Demo Key="RadarPolarViews" Title="Radar/Polar Views">
        <Description>
          <![CDATA[
          <p>Radar series views (also called as Spider or Star charts) and Polar series views are intended to display data as a circular graph. The Radar view is drawn on a circular grid and has multiple axes along which data can be plotted. The Polar view is similar to the Radar view, but displays values on the basis of angles (from 0 to 360 degrees).</p>
          <p>There can be different kinds of Polar and Radar views - Point, Line and Area. To see the entire list of available radar and polar views or to switch your current view to another, please use the View Type combo-box on the top of this demo.</p>
          <p>Other options include:</p>
          <ul>
            <li><b>Diagram Type.</b> Specifies whether a diagram should have a circular or a polygon shape.</li>
            <li><b>Show Labels.</b> Indicates whether or not series labels should be visible on a chart.</li>
            <li><b>Marker Kind.</b> Specifies the shape of data point markers.</li>
            <li><b>Marker Size.</b> Specifies the size of data point markers.</li>
          </ul>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/RadarPolarViewsRadarPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/RadarPolarViewsPolarPartial.cshtml</SourceFile>
        <SourceFile>~/Models/Weather.cs</SourceFile>
        <SourceFile>~/Models/MathematicsFunctions.cs</SourceFile>
      </Demo>
      <Demo Key="RangeViews" Title="Range Views">
        <Description>
          <![CDATA[
          <p>Range series views are intended to visualize data points that have two values - minimum and maximum. These views can represent data either as bars or as a filled area. To see the entire list of available range views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/OilPrices.cs</SourceFile>
      </Demo>
      <Demo Key="GanttViews" Title="Gantt Views">
        <Description>
          <![CDATA[
          <p>Gantt series views are intended to track different activities during a time frame. These charts are similar to Range Bar charts, yet always display the horizontal bars along the time axis. Gantt charts also provide support for displaying task links (arrowed lines) to indicate the workflow of a task represented on a chart.</p>
<p>Gantt charts can be either side-by-side or overlapped. To switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
<p>In addition, this demo demonstrates how to make a Gantt chart interactive. For example, you can try to drag &amp; drop the <b>Progress Line</b> to change its current position and to modify the state of the <b>Completed</b> bar series.</p>
<p>Note: This interactivity is implemented using client-side events. To be able use these events on a client side, set the <b>ChartControlSettings.EnableClientSideAPI</b> property to <b>True.</b></p>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/GanttViewsPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/GanttViewsSideBySidePartial.cshtml</SourceFile>
        <SourceFile>~/Models/Projects.cs</SourceFile>
      </Demo>
      <Demo Key="FinancialViews" Title="Financial Views">
        <Description>
          <![CDATA[
          <p>Stock and Candle-Stick series views (a.k.a. Low-High-Open-Close series) are often used in financial charts. These charts show variations in stock prices over the course of a day and are very useful in analyzing stock prices, bond prices and commodities behavior.</p>
<p>To see the entire list of available financial series views or to switch your current view to another, please use the <b>View Type</b> combo-box on the top of this demo.</p>
<p>Other options include:</p>
<ul>
<li><b>Show Labels.</b> Indicates whether or not series labels should be visible on a chart.</li>
<li><b>Reduction Level.</b> Specifies a price value that is taken into account when analyzing the price action to ascertain whether or not a price reduction has taken place.</li>
<li><b>Label Level.</b> Specifies which value should be shown in point labels.</li>
<li><b>Show Only Work Days.</b> Indicates whether or not it is necessary to exclude holidays and weekends from the X-axis scale.</li></ul>
          ]]>
        </Description>
        <SourceFile>~/Models/Dell.cs</SourceFile>
      </Demo>
      <Demo Key="SeriesBinding" Title="Binding Individual Series">
        <Description>
          <![CDATA[
          <p>DevExpress MVC Chart allows its series to be bound to data in two ways:</p>
<ul><li>All <b>Series</b> objects are manually added to the <b>ChartControlSettings.Series</b> collection, and each series is independently bound to appropriate data members from a chart's datasource.</li>
<li>All <b>Series</b> objects are generated dynamically from a chart's data source based on template settings specified via the <b>ChartControlSettings.SeriesTemplate</b> property.</li></ul>
<p>This demo illustrates how to use the <u>first</u> approach when each series is bound to data.</p>
<p>In this demo you can choose the category that has the products that should be displayed on a chart (via the <b>Filter By Category</b> option), as well as specify sorting rules (<b>Sort By</b> and <b>Sort Order</b> options). In addition, you can toggle the visibility of series labels via the <b>Show Labels</b> option.</p>
<p>Note that at the top-left of the chart there is information about the selected category, its minimum, maximum and average prices, dynamically updated every time you choose another category. This is implemented using the <b>BoundDataChanged</b> event that is raised after a new filter is applied.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
      </Demo>
      <Demo Key="SeriesTemplateBinding" Title="Using Series Template">
        <Description>
          <![CDATA[
          <p>DevExpress MVC Chart allows its series to be bound to data in two ways:</p>
<ul><li>All <b>Series</b> objects are manually added to the <b>ChartControlSettings.Series</b> collection, and each series is independently bound to appropriate data members from a chart's datasource.</li>
<li>All <b>Series</b> objects are generated dynamically from a chart's data source based on template settings specified via the <b>ChartControlSettings.SeriesTemplate</b> property.</li></ul>
<p>This demo illustrates how to use the <u>second</u> approach, when all series are auto-generated from a datasource according to a specified series template.</p>
<p>In this demo, you can use the <b>Series Data Member</b> drop-down list to select a data field whose values are used to generate and populate series. If the "Year" field is selected, the chart shows GSP per Region for each Year. Otherwise, if "Region" is selected, the chart shows GSP per Year for each Region.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/GSP.cs</SourceFile>
      </Demo>
      <Demo Key="HitTesting" Title="Hit-testing">
        <Description>
          <![CDATA[
          <p>This demo illustrates the interactive capabilities of the DevExpress MVC Chart extension, in particular, a capability to access any chart's element via hit-testing. </p>
<p>In this demo, after the mouse cursor crosses over a chart's element, the detailed information is shown over the chart. This information describes the highlighted object and shows its underlying data (if any). If there are multiple objects layered under a test point, their hierarchy is reflected.</p>
<p>Note: To enable this feature, the <b>ChartControlSettings.EnableClientSideAPI</b> must be set to <b>True</b>.</p>
          ]]>
        </Description>
        <SourceFile>~/Models/Weather.cs</SourceFile>
      </Demo>
      <Demo Key="DrillDown" Title="Drill Down">
        <Description>
          <![CDATA[
          <p>This demo illustrates how to create a drill-down chart.</p>
<p>The main chart is <b>Pie</b>, whose series points display the minimum price for each category. Clicking on any pie slice invokes the <b>Bar</b> chart, which displays all product prices in the selected category.</p>
<p>In the detail chart you can click the <b>Back to the main view...</b> hyperlink and the initial <b>Pie</b> chart will be restored.
Note: the <b>ChartControlSettings.EnableClientSideAPI</b> must be set to <b>true</b> to enable this feature.</p>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/DrillDownPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Chart/DrillDownCategoryPartial.cshtml</SourceFile>
        <SourceFile>~/Models/Northwind.cs</SourceFile>
      </Demo>
      <Demo Key="PrintingAndExporting" Title="Printing and Exporting">
        <Description>
          <![CDATA[
          <p>This demo illustrates how to print and export MVC Chart on the client side. This is done by using the <b>Print</b>, <b>SaveToDisk</b> and <b>SaveToWindow</b> methods of the <b>MVCxClientChart</b>.</p>
<p>To explore this feature, you can click the corresponding buttons of the custom toolbar, which is shown at the top of the chart.</p>
          ]]>
        </Description>
        <SourceFile>~/Views/Chart/PrintingAndExportingPartial.cshtml</SourceFile>
        <SourceFile>~/Models/MicrosoftAnnualRevenue.cs</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="HtmlEditor" Title="HTML Editor" SeoTitle="MVC HTML Editor">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
             <p>
                The DevExpress HTML Editor is a rich-text WYSIWYG HTML editor extension for ASP.NET MVC. Its intuitive user interface enables even the least experienced users to edit HTML page content with ease. This demo describes some of the features available to you when using the MVC HTML Editor. HTML code entered into the HTML Editor's HTML View can be automatically validated and transformed into XHTML 1.0 Transitional compliant markup. The HTML Editor exposes several options, allowing you to control required transformations.
            </p><p>
                In this demo, the HTML Editor has been customized so you can modify its numerous settings and see results in real time.
            </p><p>
                Use the <b>AllowScript</b>, <b>AllowIFrames</b> and <b>AllowFormElements</b> properties to control whether predefined tags and attribute types - scripts, IFRAME and form elements - are allowed within the editor's HTML code.
            </p><p>
                The <b>UpdateDeprecatedElements</b> and <b>UpdateBoldItalic</b> properties specify replacement of deprecated elements with valid analogs and converting <b>B</b> and <b>I</b> elements into the <b>STRONG</b> and <b>EM</b> elements, respectively.
            </p><p>
                The <b>EnterMode</b> property allows you to specify the editor's behavior when the ENTER key is pressed by an end-user - you can choose between a paragraph or line break rendering.
            </p><p>
                If Design View is active within the HTML Editor, a context menu can be displayed for end-users, which is controlled by the editor's <b>AllowContextMenu</b> property.
            </p><p>
                With the <b>AllowHtmlView</b> and <b>AllowPreview</b> properties, the HTML Editor's functionality can be further customized for your end-users.
            </p><p>
                Note: The demos presented here illustrate the use of custom images (which are uploaded to the server via callbacks) and ways to process/save them on the server. The <b>SettingsImageUpload.UploadImageFolder</b> property is set to a Controller variable, specifying the server folder used to store uploaded images, and the <b>SettingsImageUpload.UploadCallbackRouteValues</b> property is used to reference the Controller's method that processes each uploaded image. This method calls the HTMLEditorExtension.SaveUploadedImage static method in order to validate the image and save it to the specified server folder.
            </p>]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/FeaturesPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="CustomCss" Title="Custom CSS">
            <Description>
                <![CDATA[
            <p>
                The DevExpress MVC HTML Editor provides Custom CSS options that allow you to deliver custom formats as defined by custom CSS classes - exposed to end-users and applied to the content selected within the editor. By using the Custom CSS feature of the DevExpress MVC HTML Editor, logical elements (such as titles, headers, text blocks, etc) can be formatted using individual formatting styles, defined by names of the associated CSS class and HTML tag.
            </p><p>
                In this demo, custom styles are defined for content text elements such as article title, headers, the main content text and image titles. To apply any of the predefined styles to the text selected within the Design View, choose the desired style item within the "Apply CSS" bar item.
            </p><p>
                The standard toolbar's "Apply CSS" dropdown editor (ToolbarCustomCssEdit type) allows you to list available custom CSS styles and make them available to end-users.
            </p>]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/CustomCssPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="CustomDialogs" Title="Custom Dialogs">
            <Description>
                <![CDATA[
            <p>This demo illustrates ways in which you can add custom dialogs to the DevExpress MVC HTML Editor. In addition to the built-in dialogs available within the Html Editor, you can use any number of custom dialogs, which can be easily added at both design and runtime. To add custom dialogs to the editor, use its <b>CustomDialogs</b> collection. A custom dialog is represented by an <b>HtmlEditorCustomDialog</b> object, which provides the following settings:</p>
            <ul>
                <li><b>Caption</b> and <b>Name</b>. Use these properties to specify the dialog’s caption and name.</li>
                <li><b>FormPath</b>. Use this property to provide a path to the user control representing a dialog's form. In this demo, the form contains a Grid View extension bound to the InsertTemplateData.xml file, which provides predefined content templates.</li>
                <li><b>OkButtonText</b>, <b>OkButtonVisible</b>, <b>CancelButtonText</b> and <b>CancelButtonVisible</b>. These options allow you to specify the visibility and caption of two standard dialog buttons. By default, these buttons are labeled "Ok" and "Cancel". You can customize default button captions as necessary. In this demo, the Ok button's caption is modified to reflect the dialog's functionality.</li>
            </ul>
            <p>You can associate a custom dialog with a toolbar item - which when clicked invokes the dialog. To accomplish this, add a <b>ToolbarCustomDialogButton</b> toolbar item to the HTML Editor, and assign the dialog's name to the toolbar item's <b>Name</b> property.</p>
            <p>In this demo, you can click the Insert Template button to invoke the custom dialog. Within the dialog, select the desired template and click the Insert button (or simply double click the template) to insert it into the editor. You may de-activate the dialog's "Overwrite content" option in order to preserve current content when inserting templates.</p>
            <p>The MVC HTML Editor offers events that allow you to respond to end-user actions within custom dialogs and dialog button clicks on the client side. Events include:</p>
            <ul>
                <li><b>CustomDialogOpened</b>. You can handle this event to initialize a custom dialog. In the demo, the <b>OnCustomDialogOpened</b> JavaScript function represents the <b>CustomDialogOpened</b> event handler. This function calls the <b>RestoreInsertTemplateFormDialogState</b> function to focus the recently selected template in the dialog and restore the checked state of the "Overwrite content" option.</li>
                <li><b>CustomDialogClosing</b>. You can handle this event to respond to closing a custom dialog (initiated via a click on a dialog button or the header's close button). To identify a dialog and an element being clicked, use the event parameter's <b>Name</b> and <b>Status</b> properties. To prevent default processing when closing a dialog, assign true to the event parameter's handled property. In this demo, the <b>OnCustomDialogClosing</b> JavaScript function represents the <b>CustomDialogClosing</b> event handler. This function retrieves the selected template's text when the Insert dialog button is clicked (it's the Ok dialog button labeled "Insert"), and closes the dialog via a <b>ASPxClientHtmlEditor.CustomDialogComplete</b> method call. Since the dialog is closed programmatically, the function prevents the default closing of the dialog. Note that you can also double click a template to select it, and close the dialog. This is accomplished by handling the <b>RowDblClick</b> client event of the Grid View extension use within the dialog (see the <b>OnGridRowDblClick</b> function).</li>
                <li><b>CustomDialogClosed</b>. You can handle this event to perform specific actions based upon the dialog button that has been clicked or any other suitable condition. In this demo, the <b>OnCustomDialogClosed</b> JavaScript function represents the <b>CustomDialogClosed</b> event handler. This function inserts the selected template's text into the editor after pressing the dialog's Insert button or double-clicking the template. In addition, this function calls the <b>SaveInsertTemplateFormDialogState</b> function to store the dialog's selected template and the checked state of the "Overwrite content" option for future use.</li>
            </ul>            
                ]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/CustomDialogsPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="CustomToolbarItems" Title="Custom Toolbar Items">
            <Description>
                <![CDATA[
                <p>This demo illustrates how you can extend the MVC HTML Editor’s toolbar with custom items and implement item-specific functionality.</p>
                <p>In addition to standard items available within built-in toolbars, the HTML Editor allows you to add custom items and provide specific functionality for them. The following custom item types are shipped with the MVC HTML Editor:</p>
                <ul>
                    <li><b>Combo Box</b> (<b>ToolbarComboBox</b> item). A combo box provides a standard dropdown list of individual items. In this demo, you can apply a specific font size to the currently selected content by picking an appropriate combo box item.</li>
                    <li><b>Dropdown Item Picker</b> (<b>ToolbarDropDownItemPicker</b> item). A dropdown item picker represents a button with a dropdown and contains a list of selectable items. To select an item, users can hover the mouse pointer over a button or click it to activate its dropdown list and then select an item within the list. In this demo, you can insert smilies within the editor via a dropdown item picker.</li>
                    <li><b>Dropdown Menu</b> (<b>ToolbarDropDownMenu</b> item). A dropdown menu item represents a button that displays a dropdown menu when clicked. In this demo, you can insert the current date and time into the editor by selecting the desired date/time format within the dropdown menu.</li>
                </ul>
                <p>To ensure ease of use, these item types provide a common API.  Open the demo's Code page to see how you can populate dropdown lists with items and respond to item clicks.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/CustomToolbarItemsPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="SpellChecking" Title="Spell Checking">
            <Description>
                <![CDATA[
             <p>
                This demo illustrates the spell checking capabilities of the DevExpress MVC HTML Editor. Spell checking is based upon the selected dictionary (ISpell and OpenOffice dictionaries are supported), culture and grammar. These settings can be defined via HTML Editor's <b>SettingsSpellChecker</b> property.
            </p><p>
                To start spell checking, click the default 'Check Spelling' button.                
            </p>]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/SpellCheckingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Tables" Title="Tables" HighlightedIndex="2" HighlightedImageUrl="~/Content/DemoIcons/HtmlEditor.png" HighlightedTitle="HTML Editor">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the MVC HTML Editor’s built-in support of HTML tables. The HTML Editor allows end-users to create, customize, and delete tables and associated elements by using a set of predefined commands. The commands associated with table editing are available as a separate toolbar (<b>TableToolbar</b>) or by using an individual toolbar button (<b>ToolbarTableOperationsDropDownButton</b>) with a dropdown list of individual commands. By default, the <b>ToolbarTableOperationsDropDownButton</b> toolbar type button belongs to a standard toolbar (<b>StandardToolbar1</b>).
            </p><p>
                In this demo, HTML table operation commands are represented within a manually created toolbar of the <b>TableToolbar</b> type. The necessary toolbar buttons are created using the toolbar's <b>CreateDefaultItems</b> method.
            </p>]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/TablesPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Validation" Title="Validation">
            <Description>
                <![CDATA[
                <p>This demo illustrates the content validation capabilities available to you within the DevExpress MVC HTML Editor. You can define Editor content validation logic - both on the client and server - via any of the following methods:</p>
                <ul>
                    <li>Check if content is empty. Enable the <b>SettingsValidation.RequiredField</b> property to force the editor to require input and display a prompt message when validation fails.</li>
                    <li>Provide custom validation logic by handling the Editor’s <b>Validation</b> client event or passing the delegate method as a parameter to the extension's <b>GetHtml</b> function, called within the <b>Validation</b> action. Open the Code tab within this demo to see how this is accomplished.</li>
                </ul>
                <p>You are free to combine these methods together to augment validation rules when required. Additional validation options can be specified via the Editor's <b>SettingsValidation</b> property. Among others, there are options for an error frame, which is displayed within the editor's Design View when the Editor fails validation. These options allow you to specify both error description and appearance settings. In addition, you can dynamically customize error descriptions within validation event handlers.</p> 
                ]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/ValidationPartial.cshtml</SourceFile>
            <SourceFile>~/Views/HtmlEditor/ValidationSuccess.cshtml</SourceFile>
        </Demo>
        <Demo Key="ImportExport" Title="Import/Export">
            <Description>
              <![CDATA[
                <p>This demo illustrates how to import and export contents of the DevExpress MVC HTML Editor.</p>
                <p>With the HTML Editor, you can import and export editor contents from/to various document formats, including:</p>
                <ul type="disc">
                <li>Rich Text (.rtf)</li>
                <li>Office Open XML (.docx)</li>
                <li>MIME HTML (.mht)</li>
                <li>Open Document (.odt)</li>
                <li>Plain Text (.txt)</li>
                <li>Portable Document (.pdf). Available for export only.</li>
                </ul>
                <p>To import or export in code, call the <b>HtmlEditorExtension.Import</b> or <b>HtmlEditorExtension.Export</b> static method. You can allow end-users to export editor contents via a specially designed toolbar item (<b>ToolbarExportDropDownButton</b>) that provides all the required functionality out of the box. All you have to do is add it to the editor's toolbar and customize output document formats available for end-users via the <b>Items</b> collection.
                </p>
                ]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/ImportExportPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="ContextMenu" Title="Context Menu">
            <Description>
                <![CDATA[
                <p>An <b>HtmlEditor</b> context menu is a popup menu, displayed when an end-user right-clicks the content within the editor. You can select the context menu type that you wish to be displayed for end-users: a browser's context menu (for IE, Opera, etc.) that provides commands specific to this browser, or the editor's menu that provides common (Cut, Copy, Paste, Select All) and context-specific  (Modify Table, Change Image, etc.) operations. It is also possible to disable the context menu.</p>
        <p>By default, <b>HtmlEditor</b> provides a set of context menu items. You can customize the default items or add your custom items. Additionally a context menu content can be easily customizable at run time by changing an items' visibility. Visibility of default items is switched based on the currently selected element  (text, image, table, etc.) automatically.</p>
        <p>In this demo three custom context menu items are added to the default item collection. The custom item is shown provided that an image is selected.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/HtmlEditor/ContextMenuPartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Scheduler" Title="Scheduler" SeoTitle="MVC Scheduler">
      <Demo Key="Grouping" Title="Grouping">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler allows you to group appointments by resources or dates. Date value or resource caption is displayed in the column heading.
        </p><p>
          To navigate through resources and change the number of visible resources, use the built-in Resource Navigator  (buttons with arrows, plus and minus signs, and a drop-down list of resources), which is shown on the top of the scheduler.
        </p><p>
          Set the <b>SchedulerSettings.GroupType</b> option to <b>SchedulerGroupType.Resource</b> or to the <b>SchedulerGroupType.Date</b> value to enable grouping.
        </p><p>
        <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
        </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/GroupingPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="AppointmentsSelection" Title="Appointments Selection">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler provides a client-side API that can be used to obtain information on the currently selected appointment.
          </p><p>
          The <b>SchedulerSettings.ClientSideEvents.AppointmentsSelectionChanged</b> property specifies a function that will handle the appointment selection. Within that function the client-side  <b>ASPxClientScheduler.GetAppointmentProperties</b> method is used to obtain appointment property values.
          </p><p>
                  <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
        </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/AppointmentsSelectionPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="ICalendar" Title="iCalendar">
        <Description>
          <![CDATA[
          <p>
           The DevExpress MVC Scheduler allows you to exchange scheduling data between your application and the most popular calendars. Appointments can be saved to .ics file and loaded from a stream containing data in iCalendar format.
          </p><p>
          The SchedulerExtension provides you with <b>ExportToICalendar</b> and <b>ImportFromICalendar</b> methods allowing you to save and load iCalendar data with ease. 
          </p><p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/ICalendarPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="TimeZones" Title="Time Zones">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler allows you to specify a client time zone that is different from the time zone in which a server is located. This demo shows multiple time rulers in the Day View.
          </p><p>
          Each time ruler displays the time using a specific time zone.
          </p>
          <ul>
          <li>
          The first time ruler uses GMT (Greenwich Mean Time)
          </li>
      <li>The second time ruler uses server time
          </li>
          <li>
          The third time ruler uses client time, which can be changed in the drop-down box at the top of the page
          </li>
          </ul>
          <p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/TimeZonesPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Editing" Title="Editing">
        <Description>
          <![CDATA[
          <p>
          This demo illustrates appointment editing options available to you when using the DevExpress MVC Scheduler.
          </p><p>
          Double click an appointment to invoke a simple editor that allows editing appointment subject in inline mode. Right-click an appointment and select <b>Open</b> to invoke the standard appointment editing form. To create a new appointment, select time cells, right-click  and select an appropriate menu item to display the appointment editing form.
          </p><p>
          Insert, update and delete operations for appointment are implemented in the <b>SchedulerDataHelper</b> class of the demo application. The implementation is dependent on the data model chosen and reflects its specifics.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/EditingPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="CustomForms" Title="Custom Forms">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler allows you to easily substitute default dialogs with custom forms tailored to suit your requirements. This demo illustrates how to invoke a custom appointment editing form and to display a custom inline editing form.
          </p><p>
          Double-click an appointment for inline editing form. Right-click an appointment and select <b>Open</b> to show a custom appointment editing form. Note that this form allows you to edit custom appointment properties obtained via custom mappings (Price and Contact Information).
          </p><p>
          The <b>SchedulerSettings.OptionsForms</b> property allows access to the MVCxSchedulerOptionsForms object which provides you with methods such as the <b>SetAppointmentFormTemplateContent</b> and the <b>SetAppointmentInplaceEditorFormTemplateContent</b>. You can implement partial views which represent custom forms, render and pass them to these methods.
          </p>
            ]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/CustomFormsPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/CustomAppointmentFormPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/CustomInplaceEditorFormPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="CustomWorkTime" Title="Custom Work Time">
        <Description>
          <![CDATA[
          <p>
          This demo illustrates the DevExpress MVC Scheduler capability to specify custom work time intervals. To see this feature in action, toggle the Custom Work Time checkbox and observe that different days of week have different work time intervals indicated by color shading.
          </p><p>
          The technique utilizes the <b>SchedulerSettings.QueryWorkTime</b> event handler. It allows you to get information about the current resource and date for which the work time interval is requested and specify work time as required.
          </p><p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/CustomWorkTimePartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Templates" Title="Templates">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler allows you to easily customize the appearance of visual elements by providing custom templates.
          </p><p>
In this demo the <b>SetVerticalAppointmentTemplateContent</b> and the <b>SetHorizontalAppointmentTemplateContent</b> methods are used to specify custom appointment templates. The <b>SetHorizontalResourceHeaderTemplateContent</b> method enables you to include a picture in the resource header.
          </p><p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/TemplatesPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/TemplatesVerticalAppointmentPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/TemplatesHorizontalAppointmentPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="ReportTemplates" Title="Report Templates">
        <Description>
          <![CDATA[
          <p>
          This demo illustrates how to create reports which correspond to different Scheduler views by loading report templates. You can load a previously saved template and instantly preview a report filled with data retrieved from the current Scheduler control.
          </p><p>
Click Show Preview button to invoke the ReportViewer control that allows you to navigate pages, print the report and export it to common formats.
          </p><p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/ReportTemplatesPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/ReportTemplatesPreviewPartial.cshtml</SourceFile>
        <SourceFile>~/Views/Scheduler/ReportTemplatesViewerPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="DateNavigator" Title="Date Navigator">
        <Description>
          <![CDATA[
          <p>
          This demo illustrates how to use the MVCxDateNavigator control to select the visible date interval of the Scheduler. Days with appointments are shown in bold.
          </p><p>
          Click  and drag within the Date Navigator to select an interval of dates. Note that the Scheduler changes its view for better display of the chosen interval. You can also select a discontinuous interval by holding the Ctrl key.
          </p><p>
          <i>Note:</i> The Scheduler is in read-only mode. You cannot modify appointments, delete them or create new appointments.
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/DateNavigatorPartial.cshtml</SourceFile>
      </Demo>
      <Demo Key="Reminders" Title="Reminders">
        <Description>
          <![CDATA[
          <p>
          The DevExpress MVC Scheduler allows you to easily set up a reminder for an appointment. Click "Create appointment with reminder" button to create an appointment with a reminder due in 5 minutes time. Then, a reminder alert window will be invoked to provide a notification about the event.
          </p><p>
          The appointment's <b>HasReminder</b> property is used to add a reminder to an appointment. The <b>Reminder</b> property provides accesss to the reminder and allows changing its characteristics. 
          </p>]]>
        </Description>
        <SourceFile>~/Models/Cars.cs</SourceFile>
        <SourceFile>~/Views/Scheduler/RemindersPartial.cshtml</SourceFile>
      </Demo>
    </DemoGroup>
    <DemoGroup Key="TreeList" Title="TreeList" IsNew="true" SeoTitle="MVC TreeList">
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
                <![CDATA[
                    <p>This demo shows how to bind the TreeList to a <b>List</b> object. Since the TreeList is designed to display information in a tree structure, its data source should meet certain requirements. Two additional fields are necessary to build a tree structure.</p><p>The first field must contain unique values. This field must be assigned to the <b>KeyFieldName</b> property. The second field must contain values that indicate parent nodes for the current node. It should be assigned to the <b>ParentFieldName</b> property. Columns bound to these fields are called Service columns.</p><p>In this demo, toggle the '<b>Show service columns</b>' check box to display or hide service columns.</p>
                ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/DataBindingPartial.cshtml</SourceFile>    
        </Demo>
        <Demo Key="DataBindingToXML" Title="Data Binding To XML">
            <Description>
              <![CDATA[
                <p>This demo illustrates how the <b>BindToXML</b> method can be used to populate the TreeList with node information taken from an XML file. The source XML file contains hierarchical information about a set of website pages.</p>

                <p>The MVC TreeList can be bound to an XML file with the following data binding methods:</p>

                <ul>
                <li>BindToXML(string fileName);</li>
                <li>BindToXML(string fileName, string xPath);</li>
                <li>BindToXML(string fileName, string xPath, string transformFileName);</li>
                </ul>

                <p>In this demo, a column is added to the tree list. This column <b>FieldName</b> property value defines a name of the corresponding data source field.</p>
              ]]>
            </Description>
            <SourceFile>~/Views/TreeList/DataBindingToXMLPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="UnboundMode" Title="Unbound Mode">
            <Description>
              <![CDATA[
                  <p>The TreeList supports the unbound mode. In this mode, you need to manually create a tree in code. The TreeList stores its nodes within the <b>Nodes</b> collection. The tree list nodes store child nodes within the <b>ChildNodes</b> collection.</p>
              ]]>
            </Description>
            <SourceFile>~/Views/TreeList/UnboundModePartial.cshtml</SourceFile>  
        </Demo>
        <Demo Key="VirtualMode" Title="Virtual Mode">
            <Description>
              <![CDATA[
                <p>In addition to bound and unbound modes, the TreeList extension can operate in a Virtual Mode, which greatly reduces both the server load and start-up time when working with complex or dynamically created data. In a virtual mode, a tree is created on demand. In this instance, child nodes are created and initialized when their parent node is expanded. </p>
                <p>To implement a virtual mode for the TreeList extension, a specifically parameterized <b>BindToVirtualData</b> method can be used. The method's parameters refer to delegate methods that can be declared as static methods within a model class. Within the first delegate method, create a list of business objects that correspond to the child nodes owned by the processed node. The second one enables you to specify the node's key value and cell values. </p>
                <p>In this demo, the TreeList extension uses this data binding method to display the file/folder tree of this demo's website. </p>
            ]]>
            </Description>
            <SourceFile>~/Models/VirtualMode/TreeListVirtualModeHelper.cs</SourceFile>
            <SourceFile>~/Views/TreeList/VirtualModePartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Sorting" Title="Sorting">
            <Description>
              <![CDATA[
                  <p>Automatic column sorting for any data source allows you to sort against an unlimited number of columns, without writing a single line of code. A column's current sort order is indicated by a sort glyph displayed at the column header's right edge. If the column isn't sorted, the sort glyph is hidden.</p><p>Click a column's header to sort data against a data column or change the column's sort order. To sort data against multiple columns, click column headers with the SHIFT key pressed down. Clicking a column header with the CTRL key pressed down removes sorting by column's values but preserves other sort conditions.</p><p>Set the <b>SettingsBehavior.AllowSort</b> option to <b>true</b> to enable end-user sorting.</p><p>The TreeList provides a Client-Side API that enables you to apply sorting on the client. To do this, use the <b>SortBy()</b> client method.</p>
              ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/SortingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="NodePreview" Title="Node Preview">
            <Description>
              <![CDATA[
                <p>The TreeList extension provides a preview feature that allows each node to display a preview.</p>
                <p>Preview areas allow large memo fields or custom data to be displayed across all the columns within the TreeList.</p>
                <p>To enable the Preview feature, set the <b>Settings.ShowPreview</b> property to <b>true</b>.</p>
                <p>You can specify the required data source field via the <b>PreviewFieldName</b> property to bind node previews to data.</p>
                <p>Use the <b>Styles.Preview</b> property to access the style settings used to paint previews.</p>
                <p>To provide a template used for rendering previews, use the <b>Templates.Preview</b> property.</p>
              ]]>
            </Description>
            <SourceFile>~/Models/FishCatalog.cs</SourceFile>
            <SourceFile>~/Views/TreeList/NodePreviewPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
              <![CDATA[
                <p>The TreeList provides a set of templates that allow you to create custom layouts for its visual elements (column headers, data and footer cells, etc.).</p>
                <p>This sample uses Temlplates for individual nodes.</p>
                <p>The <b>DataBinder.Eval</b> method is used to define one-way (read-only) binding. The <b>DataBinder.Eval</b> method takes the name of a data field and returns an object containing the value of that field from the current record in the data source.</p>
                <p>You can also use Template Containers to obtain cell values, display text, etc.</p>
                <p>In this demo, the template contains a link labeled 'Show notes...'. Clicking this link or a picture displays a popup panel with additional information about an item. This information is obtained using a custom data callback.</p>

              ]]>
            </Description>
            <SourceFile>~/Models/FishCatalog.cs</SourceFile>
            <SourceFile>~/Views/TreeList/TemplatesPartial.cshtml</SourceFile>  
        </Demo>
        <Demo Key="InlineEditing" Title="Inline Editing">
            <Description>
              <![CDATA[
                  <p>This demo describes the TreeList extension inline edit mode. In this edit mode, cell values are edited within the in-line edit node.</p><p>For each allowed data operation (such as inserting, updating, deleting or node dragging), provide an associated controller action that will apply data changes to the Model and return the tree list's partial view. You can reference these controller actions by their names using the <b>SettingsEditing.AddNewNodeRouteValues</b>, <b>SettingsEditing.UpdateNodeRouteValues</b>, <b>SettingsEditing.DeleteNodeRouteValues</b> and <b>SettingsEditing.NodeDragDropRouteValues</b> properties. Note that node dragging is an editing operation, because while changing the node's position, its parent row identificator changes.</p><p>To allow end-users to manipulate tree list data, add a <b>Command column</b> to the TreeList's column collection and specify which commands (New, Edit, Delete) can be used by end-users. To switch a tree list node to the edit mode, end-users should be allowed to click the <b>Edit</b> command.</p>
              ]]>
            </Description>
            <SourceFile>~/Models/NewsGroups.cs</SourceFile>
            <SourceFile>~/Views/TreeList/InlineEditingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="InlineEditingWithTemplate" Title="Inline Editing (Templates)">
            <Description>
              <![CDATA[
                  <p>The TreeList allows you to provide a custom edit mode layout by creating an appropriate template for particular edited node cells or an entire Edit Form.</p><p>This demo describes how a template for the TreeList's Edit Form can be defined using the <b>SetEditFormTemplateContent</b> method. Within a template, custom label-editor pairs and Update/Cancel buttons are explicitly created using helpers from DevExpress Data Editors Extensions (such as the Label, TextBox, ComboBox, SpinEdit, Button, etc.).</p><p>Editors used within a template are customized in the following simple manner: they are bound to corresponding model data fields (via the <b>Bind</b> method), are named according to these fields (via the <b>Name</b> property), and their ability to automatically visualize model errors when validation fails is enabled (via the <b>ShowModelErrors</b> property).</p><p>Editors are bound to values of the model's currently edited data object. Note that this object is passed into a template either automatically (as a template container's <b>DataItem</b> property - when a tree list node is just switched to the edit mode) or manually (as a <b>ViewData</b> data object passed from a controller - when data modifications cannot be accomplished due to an input validation fail and returning the edited data object back to the view's Edit Form without losing user changes is required). To correctly transfer values from DevExpress editors back to corresponding data model fields, the <b>DevExpressEditorsBinder</b> model binder is used within controller actions.</p><p>Buttons that represent the Update and Cancel links are customized so that their <b>Text</b> properties are defined ("Update" and "Cancel" texts) and the <b>Click</b> client events are handled to call the TreeList's respective client methods - UpdateEdit and CancelEdit.</p>

              ]]>
            </Description>
            <SourceFile>~/Models/NewsGroups.cs</SourceFile>
            <SourceFile>~/Views/TreeList/InlineEditingWithTemplatePartial.cshtml</SourceFile>
            <SourceFile>~/Views/TreeList/InlineEditFormTemplatePartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Export" Title="Exporting Data">
            <Description>
              <![CDATA[
                            <p>The TreeList extension allows you to export data with ease.</p><p>Data can be exported to a file or stream in the following formats:</p>
							<ul>
							<li>PDF (<b>TreeListExtension.ExportToPdf</b>, <b>TreeListExtension.WritePdf</b>)</li>
							<li>XLS (<b>TreeListExtension.ExportToXls</b>, <b>TreeListExtension.WriteXls</b>)</li>
							<li>XLSX (<b>TreeListExtension.ExportToXlsx</b>, <b>TreeListExtension.WriteXlsx</b>)</li>
							<li>RTF (<b>TreeListExtension.ExportToRtf</b>, <b>TreeListExtension.WriteRtf</b>)</li></ul>
                        ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/ExportPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Summary" Title="Data Summary Via Built-in Functions">
            <Description>
              <![CDATA[
                <p>The TreeList enables you to calculate summary values for all values within a column or within a group of nodes, and display the result inside footer cells. The TreeList provides five built-in aggregate functions (count, max, min, etc.).</p>

                <p>Summaries can be displayed within Footer or Group Footer cells. The TreeList allows multiple summaries to be displayed within individual footer or group footer cells.</p>

                <p>For instance, in this demo, two summaries are displayed within the Budget column's footer cells. The first summary displays the maximum budget in this column and individual node groups (a tree branch). The second summary displays the sum of all values within the Budget column and individual node groups.</p>

                <p>The Footer is displayed if the <b>Settings.ShowFooter</b> property is set to <b>true</b>. Group Footers are displayed if the <b>Settings.ShowGroupFooter</b> option is enabled.</p>

                <p>The TreeList stores its summary items within the <b>Summary</b> collection.</p>
              ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/SummaryPartial.cshtml</SourceFile>   
        </Demo>
        <Demo Key="MultipleNodeSelection" Title="Multiple Node Selection">
            <Description>
              <![CDATA[
                <p>To allow end-users to select nodes, enable the <b>SettingsSelection.Enabled</b> option. Nodes will display selection cells that contain check boxes. End-users can check or uncheck these check boxes to select or unselect the corresponding nodes.</p><p>To enable end-users to select all nodes displayed within the TreeList, set the <b>SettingsSelection.AllowSelectAll</b> property to true. This displays a check box within the column header panel used to select/de-select all nodes. In this demo, to show/hide this check box, use 'Show Select All check box'.</p><p>The TreeList supports recursive node selection, which is enabled by the <b>SettingsSelection.Recursive</b> option. When recursive selection is enabled:</p><ul><li>a parent node is automatically selected, if all its child nodes are selected. Deselecting a child node automatically unselects its parent node(s);</li><li>selecting a parent node automatically selects all its children.</li></ul><p>In this demo, use the 'Recursive' check box to enable/disable recursive selection.</p>
            ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/MultipleNodeSelectionPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="ConditionalFormatting" Title="Conditional Formatting">
            <Description>
              <![CDATA[
                <p>The TreeList extension enables you to provide custom style settings used to paint individual data cells or entire nodes depending upon the contents of the TreeList. To do this, you should handle the <b>HtmlDataCellPrepared</b> or <b>HtmlRowPrepared</b> events, respectively. This gives you unlimited capabilities to flag data as needed.</p>
            ]]>
            </Description>
            <SourceFile>~/Models/Departments.cs</SourceFile>
            <SourceFile>~/Views/TreeList/ConditionalFormattingPartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Editors" Title="Data Editors" SeoTitle="Data Editors for ASP.NET MVC" IsUpdated="true">
        <Demo Key="CheckBoxList" Title="Check Box List">
          <Description>
            <![CDATA[
<p>
The DevExpress Check Box List is a check box group that provides end-users with the ability to select multiple items. Its contents can be generated dynamically by binding the editor to a data source. You can also create items explicitly by manually populating the <b>Properties.Items</b> collection. For each list item, you can specify its caption and associated value.
</p>

<p>
To define the Check Box List's selected items on the server side, you can use a list item's <b>Selected</b> property. On the client side, the editor exposes specific methods allowing you to manipulate item selection states with ease (<b>SelectItems</b>/<b>UnselectItems</b>, <b>SelectIndicies</b>/<b>UnselectIndicies</b>, <b>SelectValues</b>/<b>UnselectValues</b>). You can also easily select/unselect all editor items by using the <b>SelectAll</b>/<b>UnselectAll</b> client methods.
</p>

<p>
The Check Box List layout is flexibly customized. You can display check box items in several columns (<b>Properties.RepeatColumns</b>), set a direction of items within the editor (horizontal or vertical through the <b>Properties.RepeatDirection</b> property), and specify whether items are aligned within a table or rendered without any table structure (<b>Properties.RepeatLayout</b>). 
</p>
              ]]>
          </Description>
        </Demo>
        <Demo Key="ComboBox" Title="Combo Box">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the key features of the DevExpress MVC Combo Box – combining the functionality of a single-line text editor, button editor and dropdown list editor. Users can change the editor's value by selecting an item from the dropdown list or by entering new values into the editor's text box (<b>Properties.DropDownStyle</b>).
            </p><p>
                The MVC Combo Box can be populated manually (using <b>Properties.Items</b>) or generated dynamically via data binding (using <b>BindList</b>). To determine the selected item, you can use the editor's <b>SelectedIndex</b> property. The <b>Properties.DisplayFormatString</b> property can be used to specify the pattern used to format edit box display values when not focused.
            </p><p>
                The MVC Combo Box allows end-users to filter list items dynamically based upon text entered into the editor's text box on the client side (find-as-you-type filtering). Three filter modes are available - <b>None</b>, <b>StartsWith</b> and <b>Contains</b> (<b>Properties.IncrementalFilteringMode</b>).
            </p><p>
                MVC Combo Box list items can be loaded from the server on demand (via callbacks) when the editor's <b>Properties.EnableCallbackMode</b> property is set to true. For instance, list items that are not currently displayed within the editor's dropdown window can be dynamically loaded if an end-user scrolls the list. In this mode, the <b>Properties.CallBackPageSize</b> property defines the number of items to be obtained from the server each time it's required. This mode ensures that the first page loads faster - only a few items need to be loaded initially.
            </p><p>
                The MVC ComboBox Editor allows list data to be represented across multiple columns. Multi-column mode is available for editors that obtain items from a data source. An editor's column collection can be defined and customized through <b>Properties.Columns</b>. Each column within this collection must be bound to a data source field via the <b>FieldName</b> property. You can also define a column's header caption, width, visibility state and other settings via column properties. All advanced features of the Combo Box Editor, such as incremental filtering and loading items on demand via callbacks are fully supported in multi-column mode. The selected item is represented within the Combo Box Editor's edit box, using a value whose format is based upon <b>Properties.TextFormatString</b>.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/Editors/ComboBoxPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Editors/MultiColumnComboBoxPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="LargeDataComboBox" Title="Combo Box with Large Database">
          <Description>
            <![CDATA[
                <p>
                This demo shows how a specifically parameterized <b>BindList</b> method of the ComboBox editor can be used to display and filter the editor's data source containing a large amount of records (about 20 000). The <b>BindList</b> method's parameters refer to delegate methods that are declared as static methods within a model class. By providing implementation of these methods you can populate the editor's dropdown list with the required item portions (based on the currently applied filter criteria and the performed list scrolling) and obtain the data item corresponding to the editor's selected item.
                </p>

                <p>
                In this demo, the ComboBox doesn't perform filter operations on the entire database by itself. Instead, all the necessary data processing is delegated to the database server, which returns only small portions of the required data, displayed by the editor.
                </p>

                <p>
                This technique minimizes the application server's workload, and significantly reduces the application's response time. Using this technique, together with the 'Contains' filter mode of the ComboBox editor, allows you to deliver your customers with the ability to quickly and efficiently search against a huge amount of data.
                </p>

                <p>
                Being in an incremental filtering mode, the ComboBox has the capability to start filtering only after an end-user has typed a specific number of symbols in the editor's text box. The <b>FilterMinLength</b> property can be used to define the minimum length for the filter string input, after which filtering operations are initiated.
                </p>

                <p>
                This behavior is extremely useful when the ComboBox works with a large amount of data. In this case, performing filtration on each new symbol typed might not be sensible, due to the large size of the resulting data set, which might affect application performance. Thus, pausing the start of filter operations allows you to provide end-users with more sensible results, and to improve the performance of your page.
                </p>            
            ]]>
          </Description>
          <SourceFile>~/Models/LargeDatabase.cs</SourceFile>
          <SourceFile>~/Views/Editors/LargeDataComboBoxPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="DateEdit" Title="Date Edit" SeoTitle="Date and Time Editor for ASP.NET MVC" IsUpdated="true">
            <Description>
                <![CDATA[
<p>
The DevExpress MVC Date Edit extension combines the functionality of a single-line text editor, button editor, dropdown calendar, and time editor. 
</p>
<p>
Specifying a date and time (by selecting it on the calendar or by manually typing it into the text box) changes the editor's edit value. The <b>Date</b> property specifies the currently selected date.
</p>
<p>
The <b>DisplayFormatString</b> property is used to specify the format pattern used to display the editor's value within the edit box when the editor is not focused.
</p>
<p>
The <b>NullText</b> property allows you to display a prompt in the edit box. The prompt is displayed if the editor's value is null and the editor is not focused, and it disappears when the editor receives focus. 
</p>
<p>
Set the <b>UseMaskBehavior</b> property to true to support the masked input in the MVC Date Edit extension. Masks can be defined via the <b>EditFormatString</b> property if the <b>EditFormat</b> property is set to Custom. 
</p>
<p>
By default, the editor's dropdown displays a calendar that allows end-users to select dates and navigate through individual months and years. Additionally, the drop-down can display the time section if the <b>TimeSectionProperties.Visible</b> property is set to true. The time section displays the fully customizable clock and time editor. The time edit value can be formatted using a pattern specified via the <b>EditFormatString</b> property.
</p>
]]>
            </Description>
        </Demo>
        <Demo Key="DropDownEdit" Title="Dropdown Edit">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the use of the DevExpress MVC Dropdown Edit and List Box editors to emulate a combo box - allowing end-users to select multiple items from a dropdown list. The MVC Dropdown Edit includes an edit box to display editor values (defined via the <b>Text</b> property) and a button to activate a dropdown whose contents can be templated (using the <b>SetDropDownWindowTemplateContent</b> method).  
            </p><p>
                In this demo, the DropDown Edit's <b>SetDropDownWindowTemplateContent</b> method creates an instance of the ListBox editor, whose <b>SelectionMode</b> property is set to CheckColumn. The DropDownEdit's <b>Text</b> property stores a list containing selected items (<b>Text</b> property values), delimited by semicolons. In addition to selecting items within the dropdown list, this demo allows you to select items by entering a semicolon-separated series of text items in the DropDown Edit's text box. If the entered text does not exist in the list, it is deleted from the text box.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="Calendar" Title="Calendar">
          <Description>
            <![CDATA[
        <p>
        The <b>Calendar</b> editor allows you to conditionally change the manner with which you render calendar days. The following properties enable you to customize a day cell appearance and functionality:
        </p>

        <ul>
        <li>
        the <b>DayCellInitialize</b> property allows you to specify whether or not the processed day is a weekend day; this also allows you to change the day text, and set the cell's hyperlink and target;
        </li>
        <li>
        the <b>DayCellCreated</b> property allows you to populate the cell with custom controls;
        </li>
        <li>
        the <b>DayCellPrepared</b> property allows you to customize cell appearance.
        </li>
        </ul>

        <p>
        In this demo, a calendar displays information about notes scheduled on October. A list of October notes is stored within an xml file. The <b>DayCellInitialize</b> property is used to set hyperlinks for calendar days, which correspond to one or more associated notes. A click on a hyperlink sends a callback to the server to obtain the corresponding note information. The obtained information is then displayed within a popup window. The <b>DayCellPrepared</b> property specifies special style settings for the days with notes.
        </p>
           ]]>
          </Description>
          <SourceFile>~/Views/Editors/CalendarPartial.cshtml</SourceFile>
          <SourceFile>~/Views/Editors/CalendarPopupPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="RadioButtonList" Title="Radio Button List">
          <Description>
            <![CDATA[
<p>
The DevExpress Radio Button List is a radio button group that provides end-users with the ability to select a single item at a time. Its contents can be generated dynamically by binding the editor to a data source. You can also create items explicitly by manually populating the <b>Properties.Items</b> collection. For each list item, you can specify its caption and associated value.
</p>

<p>
To define the Radio Button List's selected item on the server side, you can use a list item's <b>Selected</b> property. On the client side, the editor exposes specific methods allowing you to manipulate the selected item with ease (<b>GetSelectedItem</b>/<b>SetSelectedItem</b>, <b>GetSelectedIndex</b>/<b>SetSelectedIndex</b>).
</p>

<p>
The Radio Button List layout is flexibly customized. You can display check box items in several columns (<b>Properties.RepeatColumns</b>), set a direction of items within the editor (horizontal or vertical through the <b>Properties.RepeatDirection</b> property), and specify whether items are aligned within a table or rendered without any table structure (<b>Properties.RepeatLayout</b>). 
</p>
                ]]>
          </Description>
          <SourceFile>~/Views/Editors/RadioButtonList.cshtml</SourceFile>
        </Demo>
        <Demo Key="SpinEdit" Title="Spin Edit" SeoTitle="Numeric Spin Editor for ASP.NET MVC">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the primary features of the DevExpress Spin Edit - allwoing end-users to edit numeric values with ease. The editor consists of an edit region and one or two pairs of spin buttons which can be used to adjust the numerical value. The editor's value is specified via the <b>Number</b> property.
            </p><p>
                The <b>MinValue</b> and <b>MaxValue</b> properties can be used to define the editor's minimum and maximum allowed values, limiting end-user input to a specified range. These properties limit the Number property value.
            </p><p>
                The <b>DisplayFormatString</b> property is used to specify the format pattern used to represent the editor's value within the edit box when the editor is not focused. By using the <b>NullText</b> property, a prompt can be displayed in the editor's edit box. The specified text is displayed if the editor's value is null and the editor is not focused. The prompt text disappears when the editor receives focus.
            </p><p>
                <b>NumberType</b> determines whether the MVC Spin Edit uses float or integer editing mode. In integer mode, float value input is disabled and float values displayed within the editor are automatically rounded once modified. In float mode, culture specific separators are supported, allowing decimal separators to display unique values.
            </p><p>
                When an end-user presses a small or large spin button, the <b>Number</b> property value is incremented or decremented by the amount specified via <b>Increment</b> or <b>LargeIncrement</b> properties respectively. The visibility of small and large spin buttons is managed using the <b>SpinButtons.ShowIncrementButtons</b> and <b>SpinButtons.ShowLargeIncrementButtons</b> properties.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="TextBox" Title="Text Box">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the primary features of the DevExpress MVC <b>Text Box</b> - a single-line text input editor.
                </p>
                <p>
                    The text displayed in the edit box can be specified via the <b>Text</b> property. 
                    The <b>DisplayFormatString</b> property specifies the pattern used to format an editor's value for display purposes when not focused.
                </p>
                <p>
                    The <b>Text Box</b> editor supports masked input - mask settings can be accessed via the <b>MaskSettings</b> property. 
                    A mask expression can be specified via <b>MaskSettings.Mask</b>.
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="TrackBar" Title="Track Bar">
          <Description>
            <![CDATA[
<p>
TrackBar is a slider that provides end-users with fast and easy visual data selection capabilities. With TrackBar, end-users can select single values or value ranges by positioning drag handles within a span of values limited by a developer. End-users can position a drag handle over the required editor value in the following manner:
</p>
<ul>
<li>By clicking on the track or scale,</li>
<li>By clicking on decrement or increment buttons,</li>
<li>Via the mouse wheel,</li>
<li>By dragging the handle and dropping it on the required position,</li>
<li>By pressing arrow keys.</li>
</ul>

<p>
This demo illustrates the primary features of TrackBar.
</p>
<ul>
<li>
<b>Value limits and position</b><br/>
You can define a value range to be visualized in TrackBar (within which end-users are allowed to select values) by specifying the minimum and maximum limits via the <b>Properties.MinValue</b> and <b>Properties.MaxValue</b> properties. The current editor value (that is the drag handle position) can be controlled by using the <b>Position</b> property. 
</li>
<li>
<b>Scale customization</b><br/>
TrackBar's scale visualizes a value span limited by the <b>Properties.MinValue</b> and <b>Properties.MaxValue</b> properties. The scale is fully customizable. You can display it on both sides of the track or just on one track side, or even hide the scale - via the <b>Properties.ScalePosition</b> property. The scale can display tick marks (large and small) and their labels (scale labels). Using the <b>Properties.LargeTickInterval</b> and <b>Properties.SmallTickFrequency</b> properties you can flexibly define the interval between large ticks and specify how frequently small ticks should fill a single large interval, respectively. You can also control whether or not all tick marks should be of the same size, by using the <b>Properties.EqualTickMarks</b> property.
</li>
<li>
<b>Items mode</b><br/>
Within TrackBar, you can display custom items instead of automatically generated scale marks. Populate the <b>Properties.Items</b> collection to activate TrackBar's items display mode. This collection can be filled manually or populated automatically through binding the editor to a data source. For each item, the text and associated value can be defined (via the <b>TrackBarItem.Text</b> and <b>TrackBarItem.Value</b> properties). You can specify the type of item values by using the editor's <b>Properties.ValueType</b> property. Items from the <b>Properties.Items</b> collection define the possible positions to which end-users can move drag handles within TrackBar. When an end-user selects an item, the item's index is assigned to the editor's <b>Position</b> property.
</li>
<li>
<b>Range Selection</b><br/>
TrackBar supports a range selection mode. The editor can display two draggable handles, thus allowing end-users to easily select a range of values. Range selection is allowed if the <b>Properties.AllowRangeSelection</b> property is enabled. In this mode, you can use the <b>PositionStart</b> and <b>PositionEnd</b> properties to obtain or define the selected range limits.
</li>
<li>
<b>Orientation and direction</b><br/>
Track bar supports two orientation modes - horizontal and vertical.  This can be specified via the <b>Properties.Orientation</b> property. TrackBar elements can be rendered in a normal or reversed mode that is controlled by the <b>Properties.Direction</b> property. In the reversed mode, the TrackBar direction (from <b>Properties.MinValue</b> to <b>Properties.MaxValue</b>) turns from left to right to right to left (or from up to down to down to up if TrackBar's orientation is vertical).
</li>
<li>
<b>Value tooltip</b><br/>
When an end-user changes the editor value, TrackBar is able to automatically display a tooltip indicating the current value (or value range). You can control the visibility of value tooltips and even define at which track bar side they should appear, by using the <b>Properties.ValueToolTipPosition</b> property. The value tooltip text content's format is fully customizable through the <b>Properties.ValueToolTipFormatString</b> property.
</li>
 </ul>
            ]]>
          </Description>
        </Demo>
        <Demo Key="BuiltInValidation" Title="Built-in Validation" SeoTitle="Data Editors for ASP.NET MVC - Built-in Validation">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the built-in flexibility and efficiency of our MVC data validation engine, allowing you to easily implement different validation scenarios. Validation settings can be customized for a given editor by using the editor's <b>Properties.ValidationSettings</b> property.
            </p><p>
                To define editor validation logic, use the following (can be combined together whenever required):
            </p><ul><li>
                    The <b>ValidationSettings.RequiredField</b> property can be used to force an editor to require input and give you the ability to display an error message if input is not received.
                </li><li>
                    The <b>ValidationSettings.RegularExpression</b> property allows you to validate an editor's value based upon a regular expression.
                </li><li>
                    An editor's <b>Validation</b> client event can be handled to setup custom editor validation. Review the code sample tabs within this demo, to learn how easy this really is.
                </li></ul><p>
                Editor validation is automatically triggered by changing the editor's value whenever the <b>ValidationSettings.ValidateOnLeave</b> option is enabled. You can manually initiate editor validation by using the editor's <b>Validate</b> client method or specific static client methods (such as the <b>ASPxClientEdit.ValidateEditorsInContainer</b>, <b>ASPxClientEdit.ValidateEditorsInContainerById</b>, <b>ASPxClientEdit.ValidateGroup</b>).
            </p><p>
                When an editor fails validation logic, a specific error frame containing the error’s description can be displayed. The <b>ValidationSettings.Display</b> property controls how the error frame occupies space around the editor. The error frame's appearance is customized via the <b>ValidationSettings.ErrorFrameStyle</b> property. Based upon <b>ValidationSettings.ErrorDisplayMode</b> settings, the description of an error can be represented within the error frame using an error image or text (or both). To define an error image, use the <b>ValidationSettings.ErrorImage</b> property. The error text can be specified by using either the <b>ValidationSettings.ErrorText</b> property or in the <b>Validation</b> event's handler.
            </p>]]>
            </Description>
            <SourceFile>~/Models/Validation.cs</SourceFile>
            <SourceFile>~/Views/Editors/BuiltInValidationSuccess.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="CallbackPanel" Title="Callback Panel" SeoTitle="MVC Callback Panel Extension">
        <Demo Key="Example" Title="Example" SeoTitle="MVC AJAX Container" >
            <Description>
                <![CDATA[
                    <p>
                        This demo illustrates the ease with which you can update page content in response to client-side events via callbacks.
                    </p>
                    <p>
                        With the MVC Callback Panel, updating page contents (including our extensions) via callbacks is no longer a tedious task. To simplify things, this extension offers unified callback management, allowing its child elements to be updated in one shot. In addition, the Callback Panel extension provides a built-in Loading Panel and Loading Div elements that provide visual feedback whenever a callback is processed. You can customize the appearance of these elements as your needs dictate by using the extension's <b>LoadingPanelImage</b>, <b>LoadingPanelImagePosition</b>, <b>LoadingPanelStyle</b>, <b>LoadingPanelText</b>, and <b>LoadingDivStyle</b> properties.
                    </p>
                    <p>
                        In this demo, the Callback Panel extension (see the ExamplePartial partial view) contains elements that are used to display personal information on an employee selected within a list box. The Callback Panel's contents are updated on a callback - initiated by the list box's <b>ValueChanged</b> client-side event handler. The callback routing logic is specified via the panel's <b>CallbackRouteValues</b> property. Here's how it works. When the selected employee is changed, the panel's <b>PerformCallback</b> client method is called, passing the selected employee's ID as its parameter. The model is then updated with the employee information that corresponds to the passed ID (see the GetEmployee function). As a result, the CallbackPanel's content is updated with the newly retrieved employee information.
                    </p>
                ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/CallbackPanel/ExamplePartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="DataView" Title="Data View" SeoTitle="MVC Data View Extension" IsNew="true">
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
              <![CDATA[
<p>
This demo illustrates the ability of the DevExpress DataView extension to bind to a data source. In this sample, the extension is bound to the XmlDataSource component, which obtains data from an xml file with the following structure.
</p>

<p>
<code lang="xml">
<Discs>
 <Disc ID="..." Title="..." Year="..." Price="..." />
 ...
</Discs>
</code>
</p>

<p>
The appearance of DataView data items is templated utilizing the <b>SetItemTemplateContent</b> method.
</p>
                      ]]>
            </Description>
            <SourceFile>~/Views/DataView/DataBindingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="SEOFriendlyPaging" Title="SEO Friendly Paging">
            <Description>
              <![CDATA[
<p>
A known problem is that of search engines simply ignore pagers. When indexing a site, they only use the information contained within the first page. The reason for this is that pager links are usually not represented as hyperlinks to other pages. Instead, they simply respond to click events to raise data update callbacks.
</p>
<p>
The DataView allows you to make it SEO-friendly. Use the <b>PagerSettings.SEOFriendly</b> property to accomplish this.
</p> 
<p>
If this property is set to <b>CrawlerOnly</b>, hyperlinks are rendered in the pager when a web-crawler is detected. For other visitors, standard pager links are generated. So, search engines can index the entire content, while site visitors experience the same callback functionality.
</p> 
<p>
If the property is set to <b>Enabled</b> or <b>Disabled</b>, automatic web crawler detection is disabled. The pager renders either SEO-friendly or standard links respectively.
</p> 
                        ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/DataView/SEOFriendlyPagingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="CustomCallback" Title="Custom Callback">
            <Description>
              <![CDATA[
<p>
The DataView provides the ability to initiate a custom callback on demand by using the client <b>PerformCallback</b> method and then performs required server-side processing. Typically, calling custom callbacks may be useful to solve a sorting or filtering data task displayed by the DataView control. 
</p>
<p>
This demo shows how DataView data can be sorted using custom callbacks. The data field used for sorting and the sort order can be selected using two combo boxes on the top right. The <b>PerformCallback</b> method of the DataView is called when there is a change to the combo box's selected value. Then, a specific SQL query is formed on the server side depending on current combo box values. 
</p>
                          ]]>
            </Description>
            <SourceFile>~/Models/Cameras.cs</SourceFile>
            <SourceFile>~/Views/DataView/CustomCallbackPartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Docking" Title="Docking" SeoTitle="MVC Panel Docking Extension">
        <Demo Key="Widgets" Title="Widgets">
            <Description>
              <![CDATA[
              <p>This demo illustrates how a typical scenario - implementation of web gadgets on a page - can be realized using docking components provided by the DevExpress MVC Docking Extension suite.</p>
              <p>The Docking suite offers three extensions - DockPanel, DockZone, and DockManager. They allow you to manage content placeholders (dock panels), which can be moved by end-users between particular areas (dock zones) within a web page. A dock panel can either be docked to a dock zone or made  floating. Dock zones can be placed on any part of a page and their orientation and size are fully customizable. DockManager allows you to provide centralized programmatic control of all dock panels and dock zones contained within a page.</p>
                      ]]>
            </Description>
            <SourceFile>~/Views/Docking/CalendarWidgetPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/DateTimeWidgetPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/MailWidgetPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/TradingWidgetPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/WeatherWidgetPartial.cshtml</SourceFile>
            <SourceFile>~/Models/Trading.cs</SourceFile>
            <SourceFile>~/Models/WeatherWidget.cs</SourceFile>
        </Demo>
        <Demo Key="ForbiddenZones" Title="Forbidden Zones">
            <Description>
              <![CDATA[
                  <p>This example demonstrates the forbidden zones feature allowing you to control a panel's ability to selectively dock to particular zones.</p>
                  <p>Using a dock panel's <b>ForbiddenZones</b> property, you can specify disallowed zones for the panel - the zones to which the panel cannot be docked. It is also possible to provide different appearances for the allowed and forbidden zone states by using a dock zone's <b>DockingAllowedStyle</b> and <b>DockingForbiddenStyle</b> properties. These appearances are used to highlight zones during panel dragging and to indicate whether a particular zone is allowed or disallowed for panel docking.</p>
                      ]]>
            </Description>
        </Demo>
        <Demo Key ="Callbacks" Title="AJAX">
            <Description>
              <![CDATA[
              <p>The DockPanel extension has the capability to load panel content on demand via callbacks. Several content loading modes are available via the following settings of the <b>LoadContentViaCallback</b> property.</p>
              <ul>
              <li>None - The content is always (initially) rendered inside a dock panel (the default behavior).</li>
              <li>OnPageLoad - Loading of panel contents starts immediately after an entire page has been loaded.</li>
              <li>OnFirstShow - Loading of panel contents starts when a dock panel is invoked for the first time.</li>
              <li>OnDock - Loading of panel contents starts every time a panel has been docked to a dock zone.</li>
              <li>OnDockStateChange - Loading of panel contents starts every time a panel's dock state has been changed (that is a docked panel starts floating or a floated panel docks to a zone).</li>
              <li>OnFloating - Loading of panel contents starts every time a panel has been made floated.</li>
              </ul>
              <p>Using a postponed load of panel contents, you can enhance the response time of your web page on its initial load. You can also update the content of a dock panel programmatically on demand.</p>
              <p>Note that in this example, we purposely pause callback processing on the server side for half a second in order to make the loading panel visible during this time.</p>
                  ]]>
            </Description>
            <SourceFile>~/Views/Docking/CallbacksPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/DesignDepartmentEmployeesPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/DevelopmentDepartmentEmployeesPartial.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/FloatModeContentPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
              <![CDATA[
              <p>This sample demonstrates the capabilities of our client-side event management technology. Play with dock panels to initiate client-side events. The main extension-specific client events related to panel docking are traced in this demo.</p>
              <p>All extensions included in the Docking suite (i.e. DockPanel, DockZone and DockManager) provide advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all the key elements of the panel docking functionality. So, they give you the ability to completely control the client-side behavior of dock panels and zones.</p>
              <p>The following client events are demonstrated in this demo:</p>
              <ul>
              <li><b>Init</b> (common for DockPanel, DockZone and DockManager) - Occurs on the client side after a client object has been initialized, but prior to its display on the browser.</li>
              <li><b>StartDragging</b>, <b>EndDragging</b> (specific to DockPanel); <b>StartPanelDragging</b>, <b>EndPanelDragging</b> (specific to DockManager) - Allow you to respond to the corresponding end-user actions performed on a panel.</li>
              <li><b>BeforeDock</b>, <b>AfterDock</b> (common for DockPanel, DockZone and DockManager) - Fire before and after a panel is docked to a zone; you are able to cancel panel docking, if required.</li>
              <li><b>BeforeFloat</b>, <b>AfterFloat</b> (common for DockPanel and DockManager) - Fire before and after a panel is made floating; you are able to cancel making a panel floating if required.</li>
              <li><b>PopUp</b>, <b>CloseUp</b> (specific to DockPanel); <b>PanelPopUp</b>, <b>PanelCloseUp</b> (specific to DockManager) - Allow you to respond to invoking or closing a dock panel.</li>
              </ul>
                  ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
              <![CDATA[
              <p>This example demonstrates how to manipulate dock panels programmatically on the client using our extended client-side functionality. Client-side programmatic interface is available if the <b>EnableClientSideAPI</b> property is set to <b>true</b>, or if there is a handler assigned to any client-side event. Once set, an individual client control object can be referenced directly by its <b>Name</b>.</p>   
              <p>This demo allows the selected dock panel's characteristics to be dynamically modified via client code depending upon the rightmost panel's settings.</p>
              <p>In this demo, an individual dock panel's visibility and visible index are modified via the <b>SetVisible</b> and <b>SetVisibleIndex</b> client methods. A panel's dock state (docked or float) is obtained using the <b>IsDocked</b> method. The <b>Dock</b> and <b>MakeFloat</b> client methods are used to dock a panel or make it floating.</p>
                  ]]>
            </Description>
        </Demo>
        <Demo Key="LayoutManagement" Title="Layout Management">
            <Description>
              <![CDATA[
              <p>The DockManager extension allows you to react to manipulations with panels and zones on a page and manage their layout. To obtain full information about all DockPanel and DockZone extensions on the page, Dock Manager should be rendered after them. Therefore, DockManager can not affect the panel or zone appearance.</p>
              <p>In this demo, extensions from the Docking suite are used for two different purposes: to visualize data blocks on a page using a fixed layout and to customize the layout of these data blocks via an external page. Both pages (presentation and customization) use the same set of DevExpress docking extensions. The dock panel layout defined on the customization page is preserved and synchronized with the presentation page by using the DockManager's <b>ClientLayout</b> event.</p>
              <p>To save layout changes, the client-side <b>PerformCallback</b> method should be called in the client-side <b>AfterDock</b> and <b>AfterFloat</b> events. In this demo only the <b>AfterDock</b> event is handled, because panels can be in a docked state only (the <b>AllowedDockState</b> property is set to <b>DockedOnly</b>). As the dock manager sends a callback, it is placed in a partial view.</p>
                  ]]>
            </Description>
            <SourceFile>~/Views/Docking/EditLayout.cshtml</SourceFile>
            <SourceFile>~/Views/Docking/EditLayoutPartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="LoadingPanel" Title="Loading Panel" SeoTitle="MVC Loading Panel Extension">
        <Demo Key="Example" Title="Example">
            <Description>
              <![CDATA[
                <p>
This demo demonstrates the use of the DevExpress MVC LoadingPanel Extension working in modal mode.
                </p>
                <p>
Depending on the check box setting, the loading panel can be displayed over either the entire page or a specified HTML element, which is controlled by using the <b>ContainerElementID</b> property.
                </p>
                <p>
In this demo, the loading panel is displayed and hidden dynamically via client code in response to clicking the 'Show Loading Panel' button.
                </p>
                      ]]>
            </Description>
            <SourceFile>~/Views/LoadingPanel/ExamplePartial.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Menu" Title="Menu" SeoTitle="MVC Menu Extension">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the key features of the DevExpress MVC Menu Extension. Use the items on the right to modify Menu properties.
            </p><p>
                The <b>AllowSelectItem</b> property can be used to enable menu item selection on the client side. The <b>EnableHotTrack</b> property allows you to specify whether menu items can visually respond to mouse hovering. By using the <b>EnableAnimation</b> property, you can specify whether an animation effect is used when invoking/hiding submenus.
            </p><p>
                The <b>AppearAfter</b> and <b>DissapearAfter</b> properties allow you to specify the delay (in milliseconds) used for the display of submenus within a Menu control.
            </p><p>
                <b>MaximumDisplayLevels</b> can be used to specify a menu control's depth - the number of menu levels rendered by the Menu.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates how the MVC Menu can be bound to a Model passed to a View from the Controller. The <b>Bind</b> method is used to bind the Menu to the Model. Note that the MVC Menu can only be bound to hierarchal data sources, and as such, a Model object passed to the <b>Bind</b> method must support the <b>IHierarchicalEnumerable</b> interface.
            </p>
            <p>    
                The DevExpress MVC Menu Extension ships with following data binding methods:
            </p>
            <ul>
              <li>Bind(object dataObject);</li>
              <li>BindToSiteMap(string fileName);</li>
              <li>BindToSiteMap(string fileName, bool showStartingNode);</li>
              <li>BindToXML(string fileName);</li>
              <li>BindToXML(string fileName, string xPath);</li>
            </ul>
              ]]>
            </Description>
            <SourceFile>~/Models/Categories.cs</SourceFile>
        </Demo>
        <Demo Key="DataBindingToSiteMap" Title="Data Binding to SiteMap">
            <Description>
                <![CDATA[<p>
                This demo illustrates how the <b>BindToSiteMap</b> method can be used to easily populate the Menu for ASP.NET MVC with item information taken from a SiteMap file.
            </p><p>
                Note that the Menu for ASP.NET MVC is able to automatically retrieve item information by binding to data fields whose names coincide with property names of an item object (such as the <b>Text</b>, <b>NavigateUrl</b>, <b>ImageUrl</b> and <b>ToolTip</b>). In this demo, the image path of items is obtained automatically from the corresponding attributes of data source nodes. The texts and navigation locations of items are retrieved from the standard attributes of a SiteMap file - the 'url' and 'title'.
                The texts of items of the last nested level are composed dynamically, by concatenating the values of the 'result' and 'title' attributes. This processing is performed within a delegate of the <b>ItemDataBound</b> method, which allows you to manipulate the values being assigned to the properties of a menu item during its data binding.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="PopupMenu" Title="Popup Menu">
            <Description>
                <![CDATA[
            <p>
            This demo demonstrates some of the features available to you within the DevExpress MVC PopupMenu Extension.
            </p>
            <p>
            A popup menu can be associated with a specific web element using the <b>PopupElementID</b> property. The menu is invoked automatically when a specific action (a left or right mouse click or mouse hovering) defined by the PopupAction property is performed within the associated element.
            </p>
            <p>
            In this example, PopupMenu is linked to an image. The popup menu is displayed by an action specified within the <b>PopupAction</b> dropdown editor. The menu's precise display position with respect to the associated web element can be defined by the <b>HorizontalAlign</b> and <b>VerticalAlign</b> combo boxes that control the values of the <b>PopupHorizontalAlign</b> and <b>PopupVerticalAlign</b> properties, respectively.
            </p>
            <p>
            The popup menu can be invoked programmatically as well. In this demo, the <b>ShowAtPos</b> method is used to display PopupMenu over the grid in response to a right mouse click instead of a client browser's standard context menu.
            </p>
            <p>
            Note that in this demo, menu items are arranged into a logical group using their <b>GroupName</b> property. In this case, the items function as radio buttons - checking an item unchecks the one previously selected. So, only one menu item in a group can be checked at a time.
            </p>
                ]]>
            </Description>
            <SourceFile>~/Models/PopulationAreaStructure.cs</SourceFile>
            <SourceFile>~/Views/Menu/PopupMenuGridViewPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Scrolling" Title="Scrolling">
            <Description>
                <![CDATA[
                    <p>This demo illustrates the DevExpress MVC Menu’s ability to display scroll buttons for submenus whose content does not fit within the visible area. To describe the capabilities of the MVC Menu effectively, it is displayed within an IFRAME element thus simulating window boundaries.</p>
                    <p>By default, submenus are automatically rendered to accommodate their entire content. If a submenu contains a large number of items, it might not fit vertically in the visible area. This occurs when a submenu's height exceeds the browser window's height (or the height of an IFRAME containing the menu). In such instances, scroll buttons are needed within the submenus. If scroll buttons are enabled, a submenu that does not fit the visible area automatically adjusts its height to fit the area and displays scroll buttons, allowing submenu items to be scrolled vertically. To scroll, hover the mouse pointer over a scroll button or click it to scroll faster.</p>
                    <p>To enable scroll buttons for all submenus in a menu, set the menu's <b>EnableSubMenuScrolling</b> property to true. To enable scroll buttons for specific submenus, use the <b>EnableScrolling</b> property of a submenu's parent menu item. You can customize the appearance of scroll buttons by providing custom images via the <b>ScrollButtonStyle</b>, <b>ScrollDownButtonImage</b>, and <b>ScrollUpButtonImage</b> properties.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/Menu/ScrollingFrame.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
            <p>
                This sample demonstrates the use of templates within the DevExpress MVC Menu.
            </p><p>
                A submenu template and an item template are used. These templates are assigned by using the <b>SetSubMenuTemplateContent</b> and <b>SetTemplateContent</b> methods of the Menu's item objects, respectively They contain a parameter that represents the <b>MenuItemTemplateContainer</b> object providing settings for a templated item.                
            </p>]]>
            </Description>
            <SourceFile>~/Views/Menu/TemplatesItem.cshtml</SourceFile>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
             <p>
                This example demonstrates the capabilities of our client-side event technology. All client-side events exposed by the DevExpress MVC Menu are traced in this demo. Click any menu item or move the mouse pointer over the parent menu items within the menu to initiate client-side events.
            </p><p>
                The Menu provides advanced client-side event support. Client-side events are triggered in response to specific actions or events on the client, and cover all key functional elements of the menu control. As such, they give you the ability to fully control the client-side behavior of the Menu.
            </p><p>
                Client-side event handlers represent code written in JavaScript. In order to handle a client-side event, the sender web control provides a property that accepts either handling code directly or the name of a handling function. This function must be defined directly in the page's HTML code or in a separate js file. For each client-side event, there is a specific object with both server and client-side representations. This object automatically renders the necessary JavaScript code to the page and assign it as a handler to the web control on the client side.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
            <p>
                This example demonstrates available ways to manipulate the DevExpress MVC Menu programmatically on the client using our extended client-side functionality. The client object of the Menu can be accessed on the client by its <b>Name</b>.
            </p><p>
                In this demo, each Menu item is identified using its <b>Name</b> property. In order to obtain a specific menu item by its name on the client, the <b>GetItemByName</b> method is used. A specific menu item can be selected using <b>SetSelectedItem</b>, by passing it the required item.
            </p><p>
                The <b>MenuItemClick</b> function that is a handler of the Menu's <b>ItemClick</b> client event demonstrates how to synchronize the dropdown editor's value with the name of the clicked menu item.
            </p>]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="NavBar" Title="NavBar" SeoTitle="MVC Navigation Pane Extension">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the key features available to you within the DevExpress MVC NavBar Extension. Use the controls on the right to change individual property values and see the associated results within the NavBar.
            </p><p>
                In order to disable the expansion/collapse of groups within the NavBar, the <b>AllowExpanding</b> property should be set to false. To enable selection of NavBar items on the client side, set the <b>AllowSelectItem</b> property to true.
            </p><p>
                To force the MVC NavBar Extension to display only one expanded group at any point in time, the <b>AutoCollapse</b> property value should be set to true. This behavior emulates a SideBar control.
            </p><p>
                The <b>EnableHotTrack</b> property allows you to specify whether NavBar items and groups can visually respond to mouse hover events. By using the <b>SaveStateToCookies</b> property, you can control whether information about the expansion state of groups is preserved between site visits.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates how the DevExpress MVC NavBar can be bound to a Model passed to a View from the Controller. The <b>Bind</b> method is used to bind the NavBar to the Model. Note that the NavBar can only be bound to hierarchal data sources, and as such, a Model object passed to the <b>Bind</b> method must support the <b>IHierarchicalEnumerable</b> interface.
            </p>
            <p>
                The MVC NavBar Extension ships with following data binding methods:
            </p>
            <ul>
              <li>Bind(object dataObject);</li>
              <li>BindToSiteMap(string fileName);</li>
              <li>BindToSiteMap(string fileName, bool showStartingNode);</li>
              <li>BindToXML(string fileName);</li>
              <li>BindToXML(string fileName, string xPath);</li>
            </ul>]]>
            </Description>
            <SourceFile>~/Models/Categories.cs</SourceFile>
        </Demo>
        <Demo Key="DataBindingToXML" Title="Data Binding to XML">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates how the <b>BindToXML</b> method can be used to easily populate the DevExpress MVC NavBar with group and item information taken from an xml file. The xml file has the following structure:
            </p><code lang="Xml">
                <Cameras>
                    <Brand Text="...">
                        <Camera Model="..." Pixels="..." NavigateUrl="..." ImageUrl="..." />
                        ...
                    </Brand>
                    ...
                </Cameras>
            </code><p>
                The MVC NavBar is able to automatically retrieve group and item information by binding to data fields whose names coincide with property names of a group and item objects (such as the <b>Text</b>, <b>NavigateUrl</b>, <b>ImageUrl</b> and <b>ToolTip</b>). In this demo, the group text, and both the navigation location and image path of items are obtained automatically from the corresponding attributes of data source nodes. The texts used for individual items are composed dynamically by concatenating the values of the Model and Pixels attributes. This processing is performed within a delegate of the <b>ItemDataBound</b> method, which allows you to manipulate values being assigned to the properties of a NavBar item during data binding.
            </p>]]>
            </Description>
            <SourceFile>~/Views/NavBar/DataBindingToXMLPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Callbacks" Title="AJAX">
            <Description>
                <![CDATA[
            <p>
                This sample illustrates use of AJAX-based callbacks implemented by DevExpress MVC NavBar.
            </p><p>
                The MVC NavBar supports AJAX with the ability to load a group's content from the server via a callback when the group is expanded. This approach allows the NavBar to avoid the initial transfer of all group data to the client, thus improving page load times.
            </p><p>
                In order to activate use of callbacks, the NavBar's <b>CallbackRouteValues</b> property should contain the path to an action that handles a callback request. The best way to handle such callbacks is to use a partial view that only contains a NavBar.
            </p><p>
                In this sample, we momentarily pause callback processing on the server side, so that the Loading Panel is visible during processing.
            </p>]]>
            </Description>
            <SourceFile>~/Views/NavBar/CallbacksPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
            <p>
                This sample demonstrates the use of templates within the DevExpress MVC NavBar.
            </p><p>
                Templates for the header, collapsed header and the content of a group are used in this demo. These templates are assigned by using the NavBar's <b>SetGroupHeaderTemplateContent</b>, <b>SetGroupHeaderTemplateCollapsedContent</b> and <b>SetGroupContentTemplateContent</b> methods, respectively. These methods contain a parameter that represents the NavBarGroupTemplateContainer object, providing settings of a templated element.
            </p>]]>
            </Description>
            <SourceFile>~/Views/NavBar/TemplatesContent.cshtml</SourceFile>
            <SourceFile>~/Views/NavBar/TemplatesHeader.cshtml</SourceFile>
            <SourceFile>~/Views/NavBar/TemplatesHeaderCollapsed.cshtml</SourceFile>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
            <p>
                This sample demonstrates the capabilities of our client-side event technology. All client-side events exposed by the DevExpress MVC NavBar are traced in this demo. Click any item or expand/collapse a group within the NavBar to initiate client-side events.
            </p><p>
                Client-side events are triggered in response to specific actions or events on the client side (in particular, to expanding/collapsing a group). Client-side event handlers represent code written in JavaScript. In order to handle a client-side event, the sender web control provides a property that accepts either handling code directly or the name of a handling function. This function should be defined directly in the page's HTML code or in a separate js file. For each client-side event, there is a specific object, which has both server-side and client-side representations. This object will automatically render the necessary JavaScript code to the page and assign it as a handler to the web control on the client side.                
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
            <p>
                This example demonstrates available ways to manipulate the DevExpress MVC NavBar programmatically on the client using our extended client-side functionality. The client object of the NavBar can be accessed on the client-side by its <b>Name</b>.
            </p><p>
                In this demo, each NavBar group or item is identified using its <b>Name</b> property. In order to obtain a specific group or item by its name on the client, the <b>GetGroupByName</b> or <b>GetItemByName</b> method is used respectively. In this demo, the NavBar's <b>AutoCollapse</b> mode is enabled, specifying that only one group can be expanded within the NavBar at any one time. In this mode, a group's <b>SetExpanded</b> method can be used to expand the desired group.
            </p><p>
                A given NavBar item can be selected within each group via the <b>SetSelectedItem</b> method by passing it the required item.
            </p><p>
                The <b>GroupExpandedChanged</b> function that is a handler of the NavBar's <b>ExpandedChanged</b> event demonstrates how to synchronize values of the dropdown editors with the expanded group and the group's selected item, if any.
            </p>]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="PopupControl" Title="Popup Window" SeoTitle="MVC Popup Window Extension">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
                <p>
                    This demo allows you to use many of the features provided by the DevExpress MVC Popup Extension. 
                    Use options on the right to change various layout and behavior property settings and click Apply to assign them. 
                    To invoke the MVC Popup Extension, click the PopupElement button displayed on the left.
                </p>
                <p>                                    
                    Available options include:
                </p>
                <ul>
                    <li>                    
                        <b>ShowCloseButton</b>. This option specifies whether a button is displayed within a popup window's header allowing end-users to close the window.
                    </li>
                    <li>
                        <b>ShowShadow</b>. This option applies a shadow effect to popup windows.
                    </li>
                    <li>
                        <b>ShowFooter</b> and <b>ShowHeader</b>. Use these options to toggle the visibility of a popup window's header and footer.
                    </li>
                    <li>
                        <p>
                            <b>PopupHorizontalAlign</b>. This option specifies the horizontal alignment of a popup window relative to the corresponding web control/HTML element. Option values include:
                        </p>
                        <ul>
                            <li>
                                <b>NotSet</b>. A popup window is displayed on the x-coordinate of the mouse cursor position.
                            </li>
                            <li>
                                <b>OutsideLeft</b>. A popup window is displayed to the left of the corresponding HTML element, so that the x-coordinate of the window's right border equals the x-coordinate of the element's left border.
                            </li>
                            <li>
                                <b>LeftSides</b>. A popup window is displayed, so that the left border x-coordinates of the window and its corresponding element are equal.
                            </li>
                            <li>
                                <b>RightSides</b>. A popup window is displayed, so that the right border x-coordinates of the window and its corresponding element are equal.
                            </li>
                            <li>
                                <b>OutsideRight</b>. A popup window is displayed to the right of the corresponding HTML element, so that the x-coordinate of the window's left border equals the x-coordinate of the element's right border.
                            </li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            <b>PopupVerticalAlign</b>. This option specifies the vertical alignment of a popup window with respect to the corresponding web control/HTML element. Choose one of the following option values:
                        </p>
                        <ul>
                            <li>
                                <b>NotSet</b>. A popup window is displayed on the y-coordinate of the mouse cursor position.
                            </li>
                            <li>
                                <b>Above</b>. A popup window is displayed above the corresponding HTML element, so that the y-coordinate of the window's bottom border equals the y-coordinate of the element's top border.
                            </li>
                            <li>
                                <b>TopSides</b>. A popup window is displayed, so that the top border y-coordinates of the window and its corresponding element are equal to one another.
                            </li>
                            <li>
                                <b>BottomSides</b>. A popup window is displayed, so that the bottom border y-coordinates of the window and its corresponding element are equal.
                            </li>
                            <li>
                                <b>Below</b>. A popup window is displayed below the corresponding HTML element so that the y-coordinate of the window's top border equals the y-coordinate of the element's bottom border.
                            </li>
                        </ul>
                    </li>
                    <li>
                        <b>PopupHorizontalOffset</b> and <b>PopupVerticalOffset</b>. Use these options to specify a popup window's horizontal and vertical offsets.
                    </li>
                    <li>
                        <b>Opacity</b>. This option allows you to customize the level of transparency for a popup window and its controls. The option accepts values ranging from 0 (the window is transparent and so it's completely invisible) to 100 (the window is opaque).
                    </li>
                    <li>
                        <b>EnableAnimation</b>. Use this option to enable predefined popup animation effects.
                    </li>
                    <li>
                    <b>PopupAnimationType</b>. This property specifies the type of animation used to show a popup window.
                    <ul>
                    <li><b>Fade</b>. A popup window is displayed using a fade-in effect.</li>
                    <li><b>Slide</b>. A popup window is displayed using a slide effect.</li>
                    </ul>
                    </li>
                    <li>
                        <b>AllowDragging</b>. Activate this option to allow a popup window to be dragged within the bounds of the client browser's window.
                    </li>
                    <li>
                        <b>DragElement</b>. Choose which portion of the popup window starts the drag operation: header (a popup window can be dragged by its header) or window (dragging can be started by clicking anywhere within a popup window's client area).
                    </li>
                    <li>
                        <b>AllowResize</b>. Activate this option to allow a popup window sizing. Use the option in conjunction with the <b>ResizingMode</b> and <b>ShowSizeGrip</b> options. A popup window's size limits can be specified via the <b>MinHeight</b>, <b>MinWidth</b>, <b>MaxHeight</b>, and <b>MaxWidth</b> properties.
                    </li>
                    <li>
                        <b>ResizingMode</b>. This option controls whether a popup window is redrawn dynamically during resizing operations 
                        (the <b>Live</b> value), or the window is redrawn after the resizing operation is completed (the <b>Postponed</b> value).
                    </li>
                    <li>
                        <b>ShowSizeGrip</b>. Use this option to toggle the visibility of a size grip element - that when dragged - allows end-users to size a popup window. The size grip can be displayed at all times (<b>True</b>), never (<b>False</b>) or dependent upon the <b>AllowResize</b> property setting (<b>Auto</b>).
                    </li>
                    <li>
                        <p>
                            <b>CloseAction</b>. Use this option to specify the client action that closes a popup window. Option values include:
                        </p>
                        <ul>
                            <li>
                                <b>None</b>. A popup window can be closed only in code, via a specific client script method.
                            </li>
                            <li>
                                <b>CloseButton</b>. A popup window can only be closed by pressing the Close button displayed within the window's header.
                            </li>
                            <li>
                                <b>OuterMouseClick</b>. A popup window is closed by a click outside the window's region.
                            </li>
                            <li>
                                <b>MouseOut</b>. A popup window is closed if the mouse pointer moves out of the window's region. 
                                To specify the hide delay (in milliseconds), use the <b>DisappearAfter</b> option.
                            </li>
                        </ul>
                    </li>
                    <li>
                        <p>
                            <b>PopupAction</b>. Use this option to specify the client action that invokes a popup window. Choose one of the following option values:                        
                        </p>
                        <ul>
                            <li>
                                <b>None</b>. A popup window can be invoked only in code, via a specific client script method.
                            </li>
                            <li>
                                <b>LeftMouseClick</b>. A popup window can be invoked by left-clicking a corresponding web control or 
                                HTML element, specified via the <b>PopupElementID</b> property.
                            </li>
                            <li>
                                <b>RightMouseClick</b>. A popup window can be invoked by right-clicking a corresponding web control or 
                                HTML element, specified via the <b>PopupElementID</b> property.
                            </li>
                            <li>
                                <b>MouseOver</b>. A popup window is invoked when the mouse pointer enters the region occupied by a 
                                corresponding web control or HTML element, specified via the <b>PopupElementID</b> property. 
                                To specify the display delay (in milliseconds), use the <b>AppearAfter</b> option.
                            </li>
                        </ul>
                    </li>
                </ul>

                ]]>
            </Description>
        </Demo>
        <Demo Key="DataBinding" Title="Data Binding">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the XML binding options available to you when using the DevExpress MVC Popup Extension. 
                    To invoke a popup window, move the mouse pointer over menu items displayed on the left.
                </p>
                <p>
                    The MVC Popup Extension provides a number of data binding methods, including <b>Bind</b>, <b>BindToSiteMap</b>, and 
                    <b>BindToXML</b>. In this demo, the MVC Popup Extension uses the <b>BindToXML</b> method to bind to a Charts.xml 
                    file and obtain data from its &lt;Charts&gt; element.
                </p>
                <p>
                    Our ASP.NET MVC controls allow you to bind their template controls directly to the corresponding fields of a 
                    data source's data object (<b>DataItem</b>). To accomplish this, use the <b>DataBinder.Eval</b> method, 
                    and pass <b>Container.Window.DataItem</b> and a field name as method parameters. 
                    In the demo, the <b>DataBinder.Eval</b> method is used to bind template controls of a popup window's 
                    content region and footer, via the <b>SetWindowContentTemplateContent</b> and <b>SetWindowFooterTemplateContent</b>
                    methods. For the content region, the <b>BigImageUrl</b> field provides the <b>Image</b> control with <b>ImageUrl</b>
                    property values. For the footer, the View bound field provides a label's text.                
                </p>
                ]]>
            </Description>
            <SourceFile>~/Models/Categories.cs</SourceFile>
        </Demo>
        <Demo Key="ModalMode" Title="Modal Mode">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates how you can display a modal MVC Popup Extension - useful when you need display a 
                    dialog in a modal window. To enable modal mode for a popup or specific popup window, set its 
                    <b>Modal</b> property to <b>true</b>. You can show any number of nested modal windows.
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="LoadOnDemand" Title="Load Content on Demand">
          <Description>
            <![CDATA[
        <p>
        The DevExpress MVC Popup Extension has a capability to load the content of popup windows on demand. Several content loading modes are available via the following settings of the <b>LoadContentViaCallback</b> property.
        </p>
        <ul type="disc">
        <li>Default - The content is always (initially) rendered inside popup windows (the default behavior).</li>
        <li>OnPageLoad - Loading of popup window contents starts immediately after the entire page has been loaded.</li>
        <li>OnFirstShow - Loading of popup window contents starts when a popup window is invoked for the first time.</li>
        </ul>
        <p>
        Using the postponed load of popup window contents, you can enhance the response time of your web page on its initial load
            </p>

        <p>
        Note that in this example we purposely pause callback processing on the server side for a second in order to make the Loading Panel visible during this time.
            </p>
              ]]>
          </Description>
          <SourceFile>~/Views/PopupControl/LoadOnDemandPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the use of templates within the DevExpress MVC Popup Extension.
                </p>
                <p>
                    Templates allow you to fully customize the appearance and layout of control elements. 
                    The MVC Popup Extension allows you to specify templates for its popup window headers and footers, via the 
                    <b>SetHeaderTemplateContent</b> and <b>SetFooterTemplateContent</b> methods. 
                    In this demo, the Help and Close buttons are added to the window header. 
                    The window footer is extended with a label (which is displayed or hidden in response to Help button clicks) 
                    and a color palette (which allows users to change the background color of the window's content region).
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the capabilities of our client-side event technology. 
                    All available client-side events are traced in this demo. 
                    Click an icon next to a product name to invoke an associated popup window.
                </p>
                <p>
                    Client-side events are triggered in response to specific user actions executed on the client side 
                    (in particular, when invoking or hiding a popup window). 
                    Client-side event handlers represent code written in JavaScript. 
                    In order to handle a client-side event, the sender web control provides a property that accepts 
                    either code handling directly or the name of a handling function. 
                    This function should be defined either directly in the page's HTML code or in a separate js file. 
                    For each client-side event, there is a specific object, which has both server-side and client-side representations. 
                    This object will automatically render the necessary JavaScript code to the page, 
                    and assign it as the handler to the web control on the client side.                
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
                <p>
                    This sample demonstrates the capabilities of our client-side technology. 
                    Client-side programmatic interface is available if the <b>EnableClientSideAPI</b> property is set to <b>true</b>, 
                    or if there is a handler assigned to any client-side event. Once set, an individual client control 
                    object can be referenced directly by its <b>Name</b>.
                </p>
                <p>                    
                    In this demo, each popup window is identified using its <b>Name</b> property. 
                    In order to obtain a specific popup window by its name on the client side, the <b>GetWindowByName</b> method is used. 
                    A popup window can be invoked or hidden on the client side by using the <b>ShowWindow</b> or <b>HideWindow</b> method 
                    (see the <b>SetHintVisible</b> function).
                </p>
                <p>
                    In order to show or hide a default window, the <b>Show</b> or <b>Hide</b> method can be used 
                    (see the <b>SetWindowErrorVisible</b> function).
                </p>
                <p>
                    The <b>SetContentHtml</b> method is used in this demo to display the HTML code representing the default 
                    popup window's content (see the <b>SetWindowErrorString</b> function). 
                    The content of a specific popup window can be obtained on the client side via the 
                    <b>GetWindowContentHtml</b> method and defined via the <b>SetWindowContentHtml</b> method.
                </p>
                ]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="RoundPanel" Title="Round Panel">
        <Demo Key="Features" Title="Features" SeoTitle="MVC Rounded Panel">
            <Description>
                <![CDATA[<p>
                This demo illustrates the key features available in the DevExpress MVC Round Panel Extension, including the display of the panel header, its content and the content of the panel itself.
            </p>]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="Splitter" Title="Splitter" SeoTitle="MVC Splitter Extension">
        <Demo Key="Resizing" Title="Resizing">
            <Description>
                <![CDATA[
                <p>
                    The DevExpress MVC Splitter Extension allows you to create sizable webpage content, 
                    by embedding them into splitter panes. In this demo, splitter panes contain a DevExpress 
                    MVC <b>Grid View</b>, <b>List Edit</b>, <b>Text Box</b>, and <b>Memo</b> Extensions. 
                    Splitter panes display separators and collapse buttons, allowing users to resize embedded controls.
                </p>
                <p>                
                    Moving any splitter separator raises the <b>PaneResized</b> client event, 
                    which can be handled to modify the size of embedded extensions. 
                    In this demo, size adjustments are accomplished via the embedded control's <b>SetWidth</b> and <b>SetHeight</b> methods.
                </p>
                ]]>
            </Description>
            <SourceFile>~/Models/Northwind.cs</SourceFile>
            <SourceFile>~/Views/Splitter/ResizingPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Scrolling" Title="Scrolling">
            <Description>
                <![CDATA[
                <p>
                    During sizing operations, a splitter pane can be reduced so that its content no longer fits within the allocated region. 
                    The DevExpress MVC Splitter Extension allows you to display scroll bars within a pane to prevent content clipping, 
                    via the pane's <b>ScrollBars</b> property. The following options are available to you when using scroll bars:
                </p>
                    <ul>
                    <li>
                        <b>None</b>. Scrollbars are no available.
                    </li>
                    <li>
                        <b>Horizontal</b>. Only a horizontal scroll bar is available within the splitter pane.
                    </li>
                    <li>
                        <b>Vertical</b>. Only a vertical scroll bar is available within the splitter pane.
                    </li>
                    <li>
                        <b>Both</b>. Both vertical and horizontal scroll bars are visible within the splitter pane.
                    </li>
                    <li>
                        <b>Auto</b>. The splitter automatically displays a horizontal or/and vertical scroll bar within the 
                        splitter pane, depending upon the pane's content.
                    </li>
                    </ul>
                <p>
                    In this demo, the splitter contains two panes. The left pane displays only a vertical scroll bar 
                    (the <b>ScrollBar</b> property is set to <b>Vertical</b>), the second pane's scroll bars are displayed automatically 
                    (the <b>ScrollBar</b> property is set to <b>Auto</b>). 
                    To see how scroll bars work in this demo, start sizing panes using the splitter separator.                    
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="FullscreenMode" Title="Fullscreen Mode">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates how to use the Splitter extension for ASP.NET MVC in full-screen mode, when a control fills an entire page and can be resized together with the browser window. To enable this mode, set the corresponding setting to true, as shown below.
                </p>
                <code lang="Html">
                    Html.DevExpress().Splitter(
                        settings =>
                        {
                            ...
                            settings.FullscreenMode = true;
                            ...
                        }
                </code>
                ]]>
            </Description>
            <SourceFile>~/Views/Splitter/FullscreenModePage.cshtml</SourceFile>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the capabilities of our client-side event technology. 
                    All client-side events available in the DevExpress MVC Splitter Extension are traced in the demo. 
                    To trigger these events, start to resize panes or collapse/expand them. 
                    In this demo, you can toggle options to specify whether corresponding client-side events are traced.
                </p>
                <p>
                    Client-side events are triggered in response to specific user actions performed on the client side 
                    (in particular, when sizing panes or toggling their collapsed state). 
                    Client-side event handlers represent code written in JavaScript. 
                    In order to handle a client-side event, the sender web control provides a property that accepts 
                    either code handling directly, or the name of a handling function. 
                    This function must be defined either directly in the page's HTML code or in a separate js file. 
                    For each client-side event, there is a specific object, which has both server-side and client-side representations. 
                    This object will automatically render the necessary JavaScript code to the page, and assign it as 
                    the handler to the web control on the client side.                
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates how to manipulate the DevExpress MVC Splitter programmatically on the client using 
                    our extended client-side functionality. The client-side interface is available if the 
                    <b>EnableClientSideAPI</b> property is set to <b>true</b>, or if there is a handler assigned to any client-side event. 
                    When set, an individual client control object can be referenced directly by its <b>Name</b>.
                </p>
                <p>                    
                    In this demo, the splitter's visibility (the <b>Visible</b> property) and size (the <b>AllowResize</b> property) 
                    settings can be toggled on the client via corresponding options. Option values are passed as a parameter to the 
                    <b>SetVisible</b> and <b>SetAllowResize</b> client methods. 
                    You can expand or collapse splitter panes by using a button whose caption is changed automatically depending upon the action 
                    (see the <b>UpdateButtonState</b> function). 
                    On the client side, the button's functionality is based on a pane's <b>Expand</b> and <b>Collapse</b> methods.
                </p>
                <p>
                    You can also change a splitter pane's content and width via the pane's <b>SetContentUrl</b> and <b>SetSize</b> 
                    client methods.
                </p>                
                ]]>
            </Description>
            <SourceFile>~/Views/Splitter/SamplePage1.cshtml</SourceFile>
            <SourceFile>~/Views/Splitter/SamplePage2.cshtml</SourceFile>
            <SourceFile>~/Views/Splitter/SamplePage3.cshtml</SourceFile>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="TabControl" Title="Tab Strip" SeoTitle="MVC Tab Panel Extension">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
                <p>
                    This demo describes some of the features available to you when using the DevExpress MVC Tab Extension.
                </p>
                <p>
                    Tab position (Left, Right, Top, Bottom) can be defined via the <b>TabPosition</b> property. 
                    In order to align tabs in the defined position, use the <b>TabAlign</b> property. 
                    When tabs are positioned to the left or right of the control, TabAlign defines their vertical alignment. 
                    In this instance, the Left value is treated as Top, and the Right value is always treated as Bottom.
                </p>
                <p>
                    The <b>EnableHotTrack</b> property allows you to specify whether tabs can visually respond to mouse hover events.
                </p>
                <p>
                    By using the <b>SaveStateToCookies</b> property, you can control whether information about the active tab 
                    is preserved between site visits.
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="DataBindingToXML" Title="Data Binding to XML">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates how the <b>BindToXML</b> method can be used to populate the DevExpress MVC Tab Extension 
                    with information taken from an xml file. The xml file has the following structure:
                </p>
                <code lang="Xml">
                <Products>
                    <Product name="..." text="..." id="..." />
                    ...
                </Products>
                </code>                
                <p>
                    MVC Tab Extension provides the following binding methods:
                </p>
                <ul>
                    <li>
                        Bind(object dataObject);
                    </li>
                    <li>
                        BindToSiteMap(string fileName);
                    </li>
                    <li>
                        BindToSiteMap(string fileName, bool showStartingNode);
                    </li>
                    <li>
                        BindToXML(string fileName);
                    </li>
                    <li>
                        BindToXML(string fileName, string xPath);
                    </li>
                </ul>
                <p>
                   The MVC Tab Extension implements specific properties that point to the data fields containing the necessary data. 
                   These are the <b>NameField</b>, <b>NavigateUrlField</b>, <b>TabImageUrlField</b>, <b>ActiveTabImageUrlField</b>, 
                   <b>TextField</b> and <b>ToolTipField</b> properties. 
                   If these properties are not defined, the MVC Tab Extension is able to automatically bind to data fields whose 
                   names coincide with property names of a tab object (such as the 
                   <b>Name</b>, <b>NavigateUrl</b>, <b>TabImageUrl</b>, <b>ActiveTabImageUrl</b>, <b>Text</b> and <b>ToolTip</b>).
                </p>
                <p>
                    In this demo, tab navigation locations are generated by formatting values of the 'id' data field. 
                    The 'id' data field is specified by the <b>NavigateUrlField</b> property, and a format string is defined 
                    via the <b>NavigateUrlFormatString</b> property.
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="Callbacks" Title="AJAX">
            <Description>
                <![CDATA[
                <p>
                    This sample illustrates use of the AJAX-based callbacks implemented by the DevExpress MVC Tab Extension.
                </p>
                <p>
                    The Tab Extension supports AJAX with the ability to load a tab’s content from the server via a callback when the tab becomes active. 
                    This approach allows the Tab Extension to avoid the initial transfer of all its inactive pages, thus improving page load times.
                </p>
                <p>
                    In order to activate the use of callbacks, the Tab Extension's <b>CallbackRouteValues</b> property should contain the 
                    path to an action that handles a callback request. The best way to handle such callbacks is to use a partial view 
                    that only contains a Tab Extension.
                </p>
                <p>
                    In this sample, we momentarily pause callback processing on the server side, so that the 
                    Loading Panel is visible during processing.
                </p>
                ]]>
            </Description>
            <SourceFile>~/Views/TabControl/CallbacksPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Scrolling" Title="Tab Scrolling">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates the DevExpress MVC Tab Extension’s support for scroll buttons within its tab header. 
                    To enable tab scrolling, set the <b>EnableTabScrolling</b> property to <b>true</b>. 
                    Once set, if the control's size doesn't allow all tabs to be displayed within the tab header simultaneously, 
                    scroll buttons are appear allowing end-users to scroll tabs. 
                    Scroll button position can be specified via the <b>TabAlign</b> property.                     
                </p>
                <p>
                    Note that tab scrolling is only available when the tab header is positioned on the control's top or bottom - 
                    the <b>TabPosition</b> property is set to <b>TabPostition.Top</b> or <b>TabPosition.Bottom.</b>
                </p>                
                ]]>
            </Description>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
                <p>
                    This sample demonstrates the use templates within the DevExpress MVC Tab Extension.
                </p>
                <p>
                    A tab template and an active tab template are used in this demo. 
                    These templates are assigned by using the Tab Extension's <b>SetTabTemplateContent</b> and 
                    <b>SetActiveTabTemplateContent</b> methods, respectively. 
                    These methods contain a parameter that represents the <b>TabTemplateContainer</b> object, 
                    providing settings for a templated tab object.                    
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
                <p>
                    This sample demonstrates the capabilities of our client-side event technology. 
                    All client-side events exposed by the DevExpress MVC Tab Extension are traced in this demo. 
                    Click an inactive tab to initiate client-side events.                    
                </p>
                <p>
                    Client-side events are triggered in response to specific actions or events on the client side 
                    (in particular, to an active tab change). Client-side event handlers represent code written in JavaScript. 
                    In order to handle a client-side event, the sender web control provides a property that accepts either handling 
                    code directly or the name of a handling function. 
                    This function must be defined either directly in the page's HTML code or in a separate js file. 
                    For each client-side event, there is a specific object, which has both server-side and client-side representations. 
                    This object will automatically render the necessary JavaScript code to the page and assign it as a 
                    handler to the web control on the client side.
                </p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
                <p>
                    This example demonstrates available ways to manipulate the DevExpress MVC Tab Extension programmatically 
                    on the client using enhanced client-side functionality. 
                    The client object of the Tab Extension can be accessed on the client-side by its <b>Name</b>.
                </p>
                <p>
                    The Tab Extension allows a tab’s content to be changed dynamically on the client side  by using the 
                    <b>SetTabContentHTML</b> method. The <b>GetActiveTab</b> method can be used to access the currently active tab.
                </p>
                <p>
                    The <b>ShowTabContent</b> function displays (in a specific text region) the HTML code which represents 
                    the active tab’s content. The content of the active tab is obtained via the <b>GetTabContentHTML</b> method.
                </p>
                <p>
                    The <b>ActiveTabChanged</b> function represents the hander for the <b>ActiveTabChanged</b> client event. 
                    The event's argument contains information on the active tab which is used to synchronize the value of the dropdown editor.
                </p>
                <p>
                    A tab can be activated by using the <b>SetActiveTab</b> method. 
                    In this demo, each tab is identified using its server-side <b>Name</b> property. 
                    In order to obtain a specific tab by its name on the client side, the <b>GetTabByName</b> method is used.
                </p>
                ]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="TreeView" Title="TreeView" SeoTitle="MVC Tree View Extension" IsUpdated="true">
        <Demo Key="Features" Title="Features">
            <Description>
                <![CDATA[
                <p>This demo illustrates the key features of the DevExpress MVC TreeView. Use the options in the right panel to change values of corresponding TreeView settings and view result of your changes within the TreeView.</p>
                <p>Property Descriptions:</p>
                <ul>
                    <li><b>AllowSelectNode</b> - Activates node selection. If this option is enabled, clicking a node selects it. Only one node can be selected at a time.</li>
                    <li><b>EnableAnimation</b> - Specifies whether nodes are expanded/collapsed with animation effects.</li>
                    <li><b>EnableHotTrack</b> - Specifies whether nodes are hot-tracked when the mouse pointer is positioned over them.</li>
                    <li><b>ShowTreeLines</b> - Toggles tree line visbility.</li>
                    <li><b>ShowExpandCollapseButtons</b> - Toggles the visibility of expand buttons. End-users can always expand or collapse nodes by double-clicking them.</li>
                    <li><b>AllowCheckNodes</b> - Specifies whether end-users can check nodes using corresponding check boxes. Disabling thgis option hides check boxes.</li>
                    <li><b>CheckNodesRecursive</b> - If node checking is enabled, use this option to allow end-users to recursively check nodes. In this mode, checking a node automatically checks all its immediate child nodes and vice versa.</li>
                </ul>
                ]]>
            </Description>
        </Demo>
        <Demo Key="DataBindingToXML" Title="Data Binding to XML">
            <Description>
                <![CDATA[
                <p>This demo illustrates how the <b>BindToXML</b> method can be used to populate the DevExpress MVC TreeView with node information taken from an xml file. The source XML file contains hierarchical information about a set of classes and their members (properties, methods, events).</p>
                <p>The MVC TreeView ships with the following data binding methods:</p>
                <ul>
                    <li>Bind(object dataObject);</li>
                    <li>BindToSiteMap(string fileName);</li>
                    <li>BindToSiteMap(string fileName, bool showStartingNode);</li>
                    <li>BindToXML(string fileName);</li>
                    <li>BindToXML(string fileName, string xPath);</li>
                    <li>BindToXML(string fileName, string xPath, string transformFileName);</li>
                </ul>
                <p>TreeView implements specific properties that point to the data fields containing necessary data. These are the <b>TextField</b>, <b>ImageUrlField</b>, <b>NavigateUrlField</b>, <b>NameField</b> and <b>ToolTipField</b> properties. If these properties are not defined, the TreeView is able to automatically bind to data fields whose names coincide with property names of a <b>MVCxTreeViewNode</b> object (such as the <b>Text</b>, <b>ImageUrl</b>, <b>NavigateUrl</b>, <b>Name</b> and <b>ToolTip</b>).</p>
                <p>In this demo, the <b>TextField</b>, <b>ImageUrlField</b>, and <b>NavigateUrlField</b> properties are used to specify the names of data item attributes from which corresponding node settings are obtained. The <b>NodeDataBound</b> property is used to define a delegated method, changing the text style of nodes which represent classes (text is displayed in bold).</p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="Callbacks" Title="AJAX">
            <Description>
                <![CDATA[
                <p>This sample demonstrates the use of the AJAX-based callbacks implemented by the DevExpress MVC TreeView.</p>
                <p>The MVC TreeView supports AJAX with the ability to load the content of parent nodes from the server via callbacks. This approach allows the TreeView to avoid the initial transfer of all node data to the client, thus improving page load times.</p>
                <p>In order to activate use of callbacks, the TreeViews's <b>CallbackRouteValues</b> property should contain the path to an action that handles a callback request. The best way to handle such callbacks is to use a partial view that only contains a TreeView. In this instance, the contents of the collapsed nodes are not represented on the client. When a parent node is expanded for the first time, its content is retrieved from the server and then cached on the client. The next time the node is expanded, its content is taken from the client and no callback to the server is performed.</p>
                <p>In this example, we momentarily pause callback processing on the server side, so that the Loading Panel is visible during processing.</p>
                ]]>
            </Description>
            <SourceFile>~/Views/TreeView/CallbacksPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="Templates" Title="Templates">
            <Description>
                <![CDATA[
                <p>This sample demonstrates the use of templates within the DevExpress MVC TreeView.</p>
                <p>Templates for the content of parent nodes and the child nodes are used in this demo. These templates are assigned by using the TreeView's <b>SetNodeTemplateContent</b> method. This method contains a parameter that represents the <b>TreeViewNodeTemplateContainer</b> object, providing settings of a templated element.</p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="VirtualMode" Title="Virtual Mode" IsUpdated="true">
            <Description>
                <![CDATA[
                <p>In addition to bound and unbound modes, the TreeView extension can operate in a Virtual Mode, which greatly reduces both the server load and start-up time when working with complex or dynamically created data. In a virtual mode, a tree is created on demand. In this instance, child nodes are created and initialized when their parent node is expanded. </p>
                <p>To implement a virtual mode for the TreeView extension, you should use a specifically parameterized <b>BindToVirtualData</b> method. The method's parameter refers to the delegate method that can be declared as a static method within a model class. Within this delegate method, create a list of business objects that correspond to the child nodes owned by the processed node.</p>
                <p>In this demo, the TreeView extension uses this data binding method to display the file/folder tree of this demo's website.</p>
                ]]>
            </Description>
            <SourceFile>~/Models/VirtualMode/TreeViewVirtualModeHelper.cs</SourceFile>
            <SourceFile>~/Views/TreeView/VirtualModePartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="ClientSideEvents" Title="Client-Side Events">
            <Description>
                <![CDATA[
                <p>This demo traces all client-side events available in the DevExpress MVC TreeView.</p>
                <p>Client-side events are triggered in response to specific user actions performed on the client side (in particular, when clicking nodes or changing their expanded state). Client-side event handlers represent code written in JavaScript. In order to handle a client-side event, a property is provided via ClientSideEvents, accepting either code handling directly or the name of a handling function.</p>
                <p>In this demo, the following client events are traced by default:</p>
                <ul>
                    <li><b>Init</b>. Occurs after the TreeView has been initialized, but prior to it being displayed within the browser.</li>
                    <li><b>ExpandedChanging</b> and <b>ExpandedChanged</b>. Fires before and after a node's expansion state has been changed.</li>
                    <li><b>CheckedChanged</b>. Fires after a node's checked state has been changed.</li>
                    <li><b>NodeClick</b>. Fires after a node has been clicked.</li>
                </ul>
                <p>You can toggle options to specify whether corresponding client-side events are traced.</p>
                ]]>
            </Description>
        </Demo>
        <Demo Key="ClientSideAPI" Title="Client-Side Functionality">
            <Description>
                <![CDATA[
                <p>This demo describes how you can  manipulate the DevExpress MVC TreeView programmatically on the client, using extended client-side functionality.</p>
                <p>The client-side programmatic interface is available if the <b>EnableClientSideAPI</b> property is set to true or if there is a handler assigned to any client-side event. Once set, an individual client control object can be referenced directly by its <b>Name</b>. In the demo, the MVC TreeView’s client-side API is used to do the following:</p>
                <ul>
                    <li>Toggle the visibility of the TreeView via the <b>SetVisible</b> client method.</li>
                    <li>Synchronize the currently selected TreeView node with the combo box, providing a list of nodes via the TreeView’s <b>NodeClick</b> client event handler.</li>
                    <li>Display node properties and synchronize them with corresponding options displayed within the right-hand panel. Nodes are identified using names assigned via the corresponding property. A node's client object is accessed via the TreeView's <b>GetNodeByName</b> client method. To change a TreeView’s node state, the TreeView's <b>SetSelectedNodeUpdate</b> option values in response to expanded and checked state changes via the TreeView's <b>ExpandedChanged</b> and <b>CheckedChanged</b> client event handlers. client method and the node's <b>SetEnabled</b>, <b>SetVisible</b>, <b>SetChecked</b>, or <b>SetExpanded</b> client methods are used.</li>
                    <li>Update option values in response to expanded and checked state changes via the TreeView's <b>ExpandedChanged</b> and <b>CheckedChanged</b> client event handlers.</li>
                </ul>
                ]]>
            </Description>
        </Demo>
    </DemoGroup>
    <DemoGroup Key="UploadControl" Title="File Upload" SeoTitle="MVC File Uploader">
        <Demo Key="MultiFileSelection" Title="Multi-File Selection">
            <Description>
                <![CDATA[
                <p>
                    This demo illustrates UploadControl's multi-file selection capability. It allows end-users to choose several files to upload within a single file open dialog. This demo also shows how a custom popup progress panel can be implemented to display upload progress information for both the currently processed file and the entire uploaded data.
                </p><p>
                    By default, the multi-file selection mode is disabled. To enable it, switch the <b>AdvancedModeSettings.EnableMultiSelect</b> property to true.
                </p><p>
                When multi-file selection is on, the UploadControl text box is used to display information about the current file selection. When selecting a single file, the text box contains the selected file name. When multiple files are selected, the text box displays the total number of selected files. In this case, the text box' tooltip will contain a list of the selected files.
                </p><p>
                    A list of files selected for upload can be easily cleared by using the "Clear file selection" button. By default, this button automatically appears within the text box when any file is selected. To disable the button functionality, set the <b>AdvancedModeSettings.ShowClearFileSelectionButton</b> property to false.
                </p><p>
                    In this demo, you will learn how to handle the UploadControl's <b>UploadingProgressChanged</b> client event to obtain information about file upload progress, and to use this information to calculate the speed of an upload and forecast the estimated upload time.
                </p>]]>
            </Description>
            <SourceFile>~/Views/UploadControl/MultiFileSelectionPartial.cshtml</SourceFile>
        </Demo>
        <Demo Key="MultiFileUpload" Title="Multi-File Upload">
            <Description>
                <![CDATA[
            <p>
                This demo illustrates the DevExpress MVC Upload Extension’s ability to upload more than one file at a time. The Upload Extension allows end-users to upload files to the web application's server.
            </p><p>
                The Upload Extension allows any number of file input elements to be added or removed dynamically via the extension’s user interface. The <b>ShowAddRemoveButtons</b> property controls the availability of corresponding user interface elements. The initial number of file input elements can be defined using the <b>FileInputCount</b> property.
            </p><p>
                All file input element manipulations are executed on the client side. Corresponding server-side synchronization is executed on the first round-trip to the server.
            </p><p>
                On the server, uploaded files can be accessed using the <b>UploadControlExtension.GetUploadedFiles</b> static method. Each uploaded file can be validated using the <b>UploadedFile.IsValid</b> property and can be saved via the <b>UploadedFile.SaveAs</b> method.
            </p><p>
                In this demo, clicking the 'Add images to collection' button initiates a round-trip for multi-file upload. All valid uploaded images are displayed within the bottom panel.
            </p>]]>
            </Description>
        </Demo>
        <Demo Key="Callbacks" Title="AJAX Uploading">
            <Description>
                <![CDATA[
            <p>
                The DevExpress MVC File Upload Extension allows end-users to upload files to an application server. In this demo, both client and server capabilities are used to upload an image file to the server via a callback, create the image's thumbnail, and display the thumbnail within a specific placeholder on the web page.
            </p><p>
                A callback for file upload is initiated by using the Upload Extension’s <b>Upload</b> client method - called in response to a button click. In order to process callbacks properly, the Upload Extension's <b>CallbackRouteValues</b> property is used to specify the path to a controller action used to handle a callback request. In the action's implementation, the <b>UploadControlExtension.GetUploadedFiles</b> static method with specific parameters is used to process the uploaded file. One of the parameters identifies a delegate method that receives the <b>FileUploadCompleteEventArgs</b> argument. Using this argument, the delegate method implements all the logic to save the uploaded file (using the <b>e.UploadedFile.SaveAs</b> method) and display its thumbnail in a placeholder.
            </p>]]>
            </Description>
        </Demo>
        <Demo HighlightedIndex="0" HighlightedImageUrl="~/Content/DemoIcons/ClinicalStudy.png" HighlightedTitle="Clinical Study" HighlightedLink="http://demos.devexpress.com/RWA/ClinicalStudy/" />
    </DemoGroup>
</Demos>
