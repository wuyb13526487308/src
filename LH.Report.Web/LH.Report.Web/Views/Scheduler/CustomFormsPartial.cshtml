@functions{
    AppointmentRecurrenceFormSettings CreateAppointmentRecurrenceFormSettings(CustomAppointmentTemplateContainer container){
        var settings = new AppointmentRecurrenceFormSettings();
        settings.Name = "appointmentRecurrenceForm";
        settings.Width = Unit.Percentage(100);
        settings.IsRecurring = container.Appointment.IsRecurring;
        settings.DayNumber = container.RecurrenceDayNumber;
        settings.End = container.RecurrenceEnd;
        settings.Month = container.RecurrenceMonth;
        settings.OccurrenceCount  = container.RecurrenceOccurrenceCount;
        settings.Periodicity = container.RecurrencePeriodicity;
        settings.RecurrenceRange = container.RecurrenceRange;
        settings.Start = container.Start;
        settings.WeekDays = container.RecurrenceWeekDays;
        settings.WeekOfMonth = container.RecurrenceWeekOfMonth;
        settings.RecurrenceType = container.RecurrenceType;
        settings.IsFormRecreated = container.IsFormRecreated;
        return settings;
    }
}
@{
 var extension = Html.DevExpress().Scheduler(
    settings => {
        settings.Name = "scheduler";
        settings.CallbackRouteValues = new { Controller = "Scheduler", Action = "CustomFormsPartial" };
        settings.EditAppointmentRouteValues = new { Controller = "Scheduler", Action = "CustomFormsPartialEditAppointmen" };
        settings.Start = new DateTime(2010, 7, 13);
        settings.Width = Unit.Percentage(100);

        settings.Storage.EnableReminders = false;
        settings.Storage.Resources.Assign(SchedulerDemoHelper.DefaultResourceStorage);
        settings.Storage.Appointments.Assign(SchedulerDemoHelper.CustomAppointmentStorage);
        settings.OptionsForms.RecurrenceFormName = "appointmentRecurrenceForm";

        settings.AppointmentFormShowing = (sender, e) => {
            var scheduler = sender as MVCxScheduler;
            if (scheduler != null)
                e.Container = new CustomAppointmentTemplateContainer(scheduler);
        };
        settings.OptionsForms.SetAppointmentFormTemplateContent(c => {
            var container = (CustomAppointmentTemplateContainer)c;
            var schedule = ViewData["EditableSchedule"] != null
                ? (ValidationSchedule)ViewData["EditableSchedule"]
                : new ValidationSchedule() {
                    ID = container.Appointment.Id == null ? -1 : (int)container.Appointment.Id,
                    Subject = container.Appointment.Subject,
                    Location = container.Appointment.Location,
                    StartTime = container.Appointment.Start,
                    EndTime = container.Appointment.End,
                    Description = container.Appointment.Description,
                    Price = container.Price,
                    ContactInfo = container.ContactInfo
                };
            ViewBag.DeleteButtonEnabled = container.CanDeleteAppointment;
            ViewBag.IsRecurring = container.Appointment.IsRecurring;
            ViewBag.AppointmentRecurrenceFormSettings = CreateAppointmentRecurrenceFormSettings(container);
            Html.RenderPartial("CustomAppointmentFormPartial", schedule);
        });

        settings.OptionsForms.SetAppointmentInplaceEditorFormTemplateContent(c => {
            ValidationSchedule schedule = new ValidationSchedule() { Subject = c.Appointment.Subject };
            ViewBag.AppointmentTime = string.Format("{0}, {1} - {2}", c.Appointment.Start.Date.ToShortDateString(),
                c.Appointment.Start.Date.ToShortTimeString(), c.Appointment.End.Date.ToShortTimeString());
            Html.RenderPartial("CustomInplaceEditorFormPartial", schedule);
        });
    }).Bind(Model.Appointments, Model.Resources);
    
    if (ViewBag.SchedulerErrorText != null){
        extension.SetErrorText(ViewBag.SchedulerErrorText);
    }
}
@extension.GetHtml()

    